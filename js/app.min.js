window.addEventListener('DOMContentLoaded', function() {
    $('html, body').animate({ scrollTop: 0 }, 'fast');
$('.question .quest-checkbox').click(function () {
    $(this).find('input').prop('checked', true)
    $(this).siblings('.quest-checkbox').find('input').prop('checked', false)
})

// const fpInstance = flatpickr('.date-input', {
//     locale: "ru",
//     inline: true,
//     dateFormat: 'd.m.Y',
//     showMonths: 1,
//     showDaysInNextAndPreviousMonths: false,
//     clickOpens: false,
//     yearSelectorType: 'dropdown', 
//     onChange: function (selectedDates, dateStr, instance) {
//         instance.input.value = dateStr;
//     },
//     onReady: function (selectedDates, dateStr, instance) {

//     },
//     onYearChange: function (selectedDates, dateStr, instance) {
//         renderYearDropdown(instance);
//     },
// });

const dateContainer = $('.date-container');

if (dateContainer.length) {
    dateContainer.each(function () {
        const $container = $(this);
        const isRange = $container.hasClass('diapazon');

        new AirDatepicker(this, {
            inline: true,
            autoClose: true,
            dateFormat: 'dd.MM.yyyy',
            maxDate: new Date(),
            range: isRange,
            locale: {
                days: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
                daysShort: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
                daysMin: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
                months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
                monthsShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],
                today: 'Сегодня',
                clear: 'Очистить',
                dateFormat: 'dd.MM.yyyy',
                timeFormat: 'HH:mm',
                firstDay: 1
            },
            onSelect({ formattedDate }) {
                let val = '';

                if (Array.isArray(formattedDate)) {
                    const [start, end] = formattedDate;
                    if (start && end) {
                        val = `${start} - ${end}`;
                    } else if (start) {
                        val = start;
                    }
                } else if (formattedDate) {
                    val = formattedDate;
                }

                console.log(val);
                $container.find('.date-input').val(val);
            },
            onClear() {
                $container.find('.date-input').val('');
            }
        });
    });
}




$(dateContainer).on('click', function (e) {
    e.stopPropagation();
});

$('.open-calendar').on('click', function (e) {
    const $container = $(this).closest('.date-container');
    const $input = $container.find('.date-input');
    const input = $input.get(0);

    $input.toggleClass('active');
    $input.prop('readonly', $input.hasClass('active') ? false : true);
    $container.find('.air-datepicker').toggle();
    input.blur();
    e.stopPropagation();

    $('body').on('click', function () {
        $container.find('.air-datepicker').hide();
        $input.removeClass('active');
        $input.prop('readonly', false);
    });
});

$(document).on('click', function (e) {
    $('.date-input').each(function () {
        const instance = this._airDatepicker;
        if (instance) {
            instance.hide();
        }
    });
});

$('.date-container').on('click', function (e) {
    e.stopPropagation();
});


$('.input-file input[type="file"]').on('change', function () {
    const file = this.files[0];
    if (!file) return;

    const allowedExtensions = ['jpg', 'jpeg', 'png', 'pdf'];
    const maxSizeMB = 30;
    const fileName = file.name;
    const fileExt = fileName.split('.').pop().toLowerCase();
    const fileSizeMB = file.size / (1024 * 1024);

    const $container = $(this).closest('.input-file');
    $container.find('.attached-item').remove();

    if (!allowedExtensions.includes(fileExt)) {
        alert('Разрешены только файлы: JPG, PNG, PDF');
        $(this).val('');
        return;
    }

    if (fileSizeMB > maxSizeMB) {
        alert('Максимальный размер файла — 30 МБ');
        $(this).val('');
        return;
    }

    const fileSize = (file.size / 1024).toFixed(1); // в KB

    const attachedHtml = `
        <div class="attached-item">
            <div class="attached-item-left">
                <div class="icon">
                    <img src="img/icons/file-type-icon.svg" alt="">
                </div>
                <div class="text">
                    <span class="file-name">${fileName}</span>
                    <span class="file-details">${fileSize} KB – 100% загружено</span>
                </div>
            </div>
            <label class="input-checkbox">
                <input type="checkbox" checked>
                <span class="input">
                    <img src="img/icons/check.svg" alt="">
                </span>
            </label>
        </div>
    `;

    $container.append(attachedHtml);
    $('.file-name-output').text(fileName);
    $('.file-details-output').text(`${fileSize} KB – 100% загружено`);
});

$(".like-btn").on("click", function () {
    $(this).toggleClass("active");
});

const productSwipers = document.querySelectorAll('.product-swiper .swiper');

productSwipers.forEach((swiperEl) => {
    new Swiper(swiperEl, {
        slidesPerView: 'auto',
        loop: true,
        pagination: {
            el: swiperEl.closest('.product-swiper').querySelector('.swiper-pagination'),
            clickable: true,
        },
        breakpoints: {
            0: {
                slidesPerGroup: 3,
            },
            768: {
                slidesPerGroup: 1,
            },
        },
    });
});

function setVhUnit() {
    const vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

setVhUnit();
window.addEventListener('resize', setVhUnit);

const counter = $('.counter');

if (counter.length) {
    const counterBtn = counter.find('.counter-btn');

    $(counterBtn).on('click', function () {
        const counterCount = $(this).siblings('.count');
        if ($(this).val() === '+') {
            const count = Number($(counterCount).text());
            $(counterCount).text(count + 1);
        } else if ($(this).val() === '-' && Number($(counterCount).text()) > 1) {
            const count = Number($(counterCount).text());
            $(counterCount).text(count - 1);
        }
    })
}

$('.promocode-input input').on('input', function () {
    if ($(this).val().length <= 0) {
        $(this).closest('.promocode-input').removeClass('error succes');
    } else if ($(this).val().length > 3) {
        $(this).closest('.promocode-input').addClass('succes');
        $(this).closest('.promocode-input').removeClass('error');
    } else {
        $(this).closest('.promocode-input').addClass('error');
        $(this).closest('.promocode-input').removeClass('succes');
    }
})


$('.input-checkbox').on('click', function () {
    const wrapper = $(this).closest('.only-one-checked');
    const input = $(this).find('input[type="checkbox"]');

    if ($(wrapper).get(0)) {
        wrapper.find('.input-checkbox').removeClass('active');
        wrapper.find('input[type="checkbox"]').prop('checked', false);
        input.prop('checked', true);
        $(this).addClass('active');
    } else {
        input.prop('checked', !input.prop('checked'));
        $(this).toggleClass('active');
    }
});

$('.pay-btn').on('click', function () {
    window.location.href = '/payment-success.html';
})
const $inputText = $('.input-text input');
$inputText.on('input', function () {
    const name = $(this).attr('name');
    const output = $(`.${name}-output`);
    if (output.length) {
        $(output).text($(this).val());
        $(output).val($(this).val());
    }
});


const photoUpload = $('.photo-upload');
const uploadArea = $(photoUpload).find('.photo-upload-area')

if ($(photoUpload).get(0)) {
    const uploadInput = $(photoUpload).find('input');
    $(uploadInput).on('change', function () {
        const file = this.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = function (e) {
            const uploadedItem = `
                <div class="uploaded-photo-item">
                    <img src="${e.target.result}" alt="" class="uploaded-img">
                    <button type="button" class="remove-btn">
                        <img src="img/remove-icon.svg" alt="">
                    </button>
                </div>
            `;
            $(photoUpload).prepend(uploadedItem);
        }
        reader.readAsDataURL(file);
        if ($(photoUpload).hasClass('one-photo')) {
            $(photoUpload).find('.photo-upload-area').remove();
        }
    })
}

$(document).on('click', '.remove-btn', function () {
    $(this).closest('.uploaded-photo-item').remove();
    if ($(photoUpload).find('.photo-upload-area').length === 0) {
        $(photoUpload).append(uploadArea);
    }
})

$('.dropdown').on('click', function () {
    $(this).find('.dropdown-content').slideToggle(500);
})

$('.dropdown-content button').on('click', function () {
    $(this).closest('.dropdown').find('.dropdown-title-text').text($(this).text());
})

const homeMainStories = new Swiper('.home-main__stories .swiper', {
    slidesPerView: 'auto',
    loop: true,
    spaceBetween: 20,
});
const homeMainBanner = new Swiper('.home-main__banner .swiper', {
    slidesPerView: 1,
    spaceBetween: 20,
    loop: true,
    pagination: {
        el: '.home-main__banner .swiper-pagination',
        clickable: true,
    },
    autoplay: {
        delay: 2500,
        disableOnInteraction: false,
    },
});

$(".home-burger-btn").on("click", function () {
    $('.header-home-mobile').animate({
        width: '100%'
    }, 500);
})

$(".header-home-mobile .close-btn").on("click", function () {
    $('.header-home-mobile').animate({
        width: '0%'
    }, 500);
})
    $(function () {
	const mobileThreshold = 1024;
  
	function isMobile() {
	  return window.innerWidth < mobileThreshold;
	}
  
	function bindSwipeToClose($menu) {
	  let startY = 0, currentY = 0, dragging = false;
  
	  $menu.on('touchstart', function (e) {
		if (!isMobile() || e.originalEvent.touches.length !== 1) return;
		dragging = true;
		startY = e.originalEvent.touches[0].clientY;
		currentY = startY;
		$menu.css('transition', 'none');
	  });
  
	  $menu.on('touchmove', function (e) {
		if (!dragging) return;
		currentY = e.originalEvent.touches[0].clientY;
		const deltaY = currentY - startY;
		if (deltaY < 0) {
		  $menu.css('transform', `translateY(${deltaY}px)`);
		}
	  });
  
	  $menu.on('touchend touchcancel', function () {
		if (!dragging) return;
		dragging = false;
		const deltaY = currentY - startY;
  
		$menu.css('transition', 'transform 0.3s ease');
  
		if (deltaY < -(window.innerHeight * 0.15)) {
		  $menu.css({
			transition: 'transform 0.3s ease, opacity 0.3s ease',
			transform: 'translateY(-100%)',
			opacity: 0,
		  });
		  setTimeout(() => {
			$menu.css({ transform: '', opacity: '', transition: '' }).slideUp(0);
		  }, 300);
		} else {
		  $menu.css('transform', 'translateY(0)');
		}
	  });
	}
  
	const $profileSubmenu = $('.header-submenu.my-profile');
	const $infoSubmenu = $('.header-submenu.info');
  
	bindSwipeToClose($profileSubmenu);
	bindSwipeToClose($infoSubmenu);
  
	$('.header-menu-link.profile').on('click', function (e) {
	  e.preventDefault();
	  $('.header-submenu').slideUp(200);
	  $profileSubmenu.stop(true, true).slideDown(300).css({ transform: 'translateY(0)', opacity: 1 });
	});
  
	$('.header-menu-link.info').on('click', function (e) {
	  e.preventDefault();
	  $('.header-submenu').slideUp(200);
	  $infoSubmenu.stop(true, true).slideDown(300).css({ transform: 'translateY(0)', opacity: 1 });
	});
  
	$('.btn.btn-submenu-hide').on('click', function () {
	  $(this).closest('.header-submenu').stop(true, true).slideUp(200);
	});
  
	$(document).on('click', function (e) {
	  if (!$(e.target).closest('.header-submenu-item, .header-submenu, .header-menu-link').length) {
		$('.header-submenu').stop(true, true).slideUp(200);
	  }
	});
  });
  

$(window).on('load', function () {
	$('.header-menu-btn').click(function () {
		$('.menu-category').addClass('open');
		$('.menu-category-close').show();
	});
	$('.menu-category-close').click(function () {
		$('.menu-category').removeClass('open');
		$('.menu-category-close').hide();
	});
});

$(document).ready(function () {
	function setActualViewportHeight() {
		const vh = window.innerHeight * 0.01;
		document.documentElement.style.setProperty('--vh', `${vh}px`);
	}

	function calculateMainHeight() {
		setActualViewportHeight();

		const header = $('.header');
		const footer = $('.footer');

		const headerHeight = header.outerHeight(true) || 0;
		const footerHeight = footer.outerHeight(true) || 0;

		const windowHeight = window.innerHeight ||
			(document.documentElement.clientHeight * 1);

		const mainHeight = windowHeight - headerHeight - footerHeight;

		$('.main').css({
			'min-height': Math.max(mainHeight, 0),
			'height': Math.max(mainHeight, 0),
			'overflow-y': 'auto'
		});
	}

	calculateMainHeight();

	if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
		window.addEventListener('orientationchange', function () {
			setTimeout(calculateMainHeight, 300);
		});

		document.addEventListener('focusin', calculateMainHeight);
		document.addEventListener('focusout', calculateMainHeight);
	}

	let resizeTimer;
	$(window).on('resize', function () {
		clearTimeout(resizeTimer);
		resizeTimer = setTimeout(calculateMainHeight, 100);
	});
});

    const $authSwiper = $('.auth .swiper')

var authSwiperContainer = new Swiper($authSwiper.get(0), {
    allowTouchMove: false,
    simulateTouch: false,
    spaceBetween: 30,
});

$('.phone-input').inputmask('+7 (999) 999-99-99');
$('.code-input input').inputmask('9');

$('.phone-input').on('input', function () {
    $('.tel-output')?.text($(this).val());
});

const $formSteps = $('.auth-item');
const $codeInputs = $('.code-input input');
const $mobileSubmitButton = $('.form-submit-mobile .button');

function getActiveSlide() {
    return $('.auth-item').eq(authSwiperContainer.activeIndex);
}

function isPhoneValid() {
    return getActiveSlide().find('.phone-input').inputmask("isComplete");
}

function isCodeValid() {
    const inputs = getActiveSlide().find('.code-input input');
    return inputs.toArray().every(input => $(input).inputmask("isComplete"));
}

function updateMobileButtonState() {
    const activeSlide = getActiveSlide();

    let isValid = false;

    if (activeSlide.find('.phone-input').length) {
        isValid = isPhoneValid();
    }

    if (activeSlide.find('.code-input').length) {
        isValid = isCodeValid();
    } else {
        isValid = true
    }

    $mobileSubmitButton.toggleClass('disabled', !isValid);
}

$formSteps.eq(0).find('.phone-input').on('input blur', function () {
    const $input = $(this);
    const isComplete = $input.inputmask("isComplete");
    const $parent = $input.closest('.input-text');
    const $button = $input.closest('.auth-item').find('.button');

    if (isComplete) {
        $parent.removeClass('empty error');
        $button.removeClass('disabled');
    } else {
        if (event.type === 'blur') {
            $parent.addClass('error');
        }
        $parent.addClass('empty');
        $button.addClass('disabled');
    }

    updateMobileButtonState();
});

$formSteps.find('.form-submit .button').on('click', function () {
    if (!$(this).hasClass('disabled')) {
        const $form = $(this).closest('.auth-form');
        if ($form.find('input[name="buyer"]')?.get(0)?.checked) {
            return $form.trigger('submit');
        }
        if (authSwiperContainer.isEnd) {
            $form.trigger('submit')
        }
        authSwiperContainer.updateSlides();
        authSwiperContainer.allowTouchMove = true;
        authSwiperContainer.allowSlideNext = true;
        authSwiperContainer.slideNext();
        updateMobileButtonState();
    }
});

authSwiperContainer.on('slideChange', function () {
    $mobileSubmitButton.addClass('disabled');
    updateMobileButtonState();
});

$mobileSubmitButton.on('click', function () {
    const $activeSlide = getActiveSlide();
    const $buttonInSlide = $activeSlide.find('.button:not(.disabled)');
    if ($buttonInSlide.length) {
        $buttonInSlide.trigger('click');
        $mobileSubmitButton.addClass('disabled')
    }
});

$codeInputs.on('input', function () {
    const index = $codeInputs.index(this);
    const isComplete = $(this).inputmask("isComplete");

    if (isComplete && index < $codeInputs.length - 1) {
        $codeInputs.eq(index + 1).focus();
    }

    const allFilled = $codeInputs.toArray().every(input => {
        return $(input).inputmask("isComplete");
    });

    const $button = $(this).closest('.auth-item').find('.button');
    $button.toggleClass('disabled', !allFilled);
    updateMobileButtonState();
});

$codeInputs.on('keydown', function (e) {
    const index = $codeInputs.index(this);
    const isComplete = $(this).inputmask("isComplete");

    if (e.key === 'Backspace' && !isComplete && index > 0) {
        $codeInputs.eq(index - 1).focus();
    }
});

const authTypes = $('.auth-types')

if ($(authTypes).get(0)) {
    const checkboxes = $(authTypes).find('.auth-type-checkbox')
    $(checkboxes).click(function () {
        $(this).find('input').prop('checked', true);
        $(this).siblings('.auth-type-checkbox').find('input').prop('checked', false);
        const $button = $(this).closest('.auth-item').find('.button');
        $button.removeClass('disabled');
        if ($(window).width() < 1024) {
            updateMobileButtonState();
            $('.form-submit-mobile').css('display', 'flex');
            if ($(this).data('type') === 'buyer' || $(this).data('type') === 'partner') {
                $button.trigger('click');
            }
        }
    })
}

const partnerTypes = $('.partner-types');

if (partnerTypes.length) {
    const checkboxes = partnerTypes.find('.partner-type-checkbox input');

    checkboxes.on('change', function () {
        const $button = $(this).closest('.auth-item').find('.button');
        const anyChecked = checkboxes.is(':checked');

        if (anyChecked) {
            $button.removeClass('disabled');
        } else {
            $button.addClass('disabled');
        }

        if ($(window).width() < 1024) {
            updateMobileButtonState();
        }
    });
}

$('.back').click(function (e) {
    if ($authSwiper.get(0)) {
        if (!swiper.isBeginning) {
            e.preventDefault()
            authSwiperContainer.slidePrev()
        }
    }
})

$(".resend-code").on('click', function () {
   $('.code-input input').val('');
})
    $(document).ready(function () {
    const $tabContainer = $('.auth-item-tabs');
    const $tabItems = $tabContainer.find('.tab-item');
    const $tabButtons = $('.tab-btn');
    const $nextButtons = $('.next-tab .button');
    const $nextButtonsMobile = $('.next-tab-mobile .button');
    const $innMask = $('.inn-mask');
    const $ogrnipMask = $('.ogrnip-mask');
    const $okatoMask = $('.okato-mask');
    const $ogrnMask = $('.ogrn-mask');
    const $contactItem = $('.contact-item');
    const $accountMask = $('.account-mask');
    const $kaccountMask = $('.kaccount-mask');
    const $bikMask = $('.bik-mask');
    const $changeInfoButtons = $('.partner-info-item .change');
    const $deleteFileButtons = $('.partner-info-item .delete');
    const $tabBtnRegPartners = $('.reg-partners-tabs .tab-btn');
    const $inputText = $('.input-text input');
    let currentTabIndex = 0;
    let selectedBusinessIndex = 0;
  
    if ($tabBtnRegPartners.length) {
      const isLLC = $('.llc-checkbox').prop('checked');
      updateTabBtn(isLLC);
    }
  
    $innMask.inputmask('9999999999');
    $ogrnipMask.inputmask('999999999999999');
    $okatoMask.inputmask('9999999999');
    $ogrnMask.inputmask('999999999999999');
    $accountMask.inputmask('99999999999999999999');
    $bikMask.inputmask('999999999');
    $kaccountMask.inputmask('99999999999999999999');
  
    if ($contactItem.get(0)) {
      $contactItem.find('.slide-btn input').on('change', function () {
        const $checkbox = $(this);
        const name = $checkbox.attr('name');
        $(`.${name}-input`).toggle($checkbox.prop('checked'));
        const $contactForm = $checkbox.closest('.contact-item').find('.contact-item-form');
        $contactForm.toggle($checkbox.prop('checked'));
      });
    }
  
    $changeInfoButtons.on('click', function () {
      activateTab($(this).val());
      $('.next-tab .button').val('edit');
    });
  
    $deleteFileButtons.on('click', function () {
      $(this).closest('.partner-info-item').remove();
    });
  
    $nextButtonsMobile.on('click', function () {
      if ($(this).val() === 'edit') {
        activateTab($tabItems.length - 1);
        return;
      }
      const isValid = updateStepButtonState(currentTabIndex);
      if (!isValid) return;
      const nextIndex = currentTabIndex;
      if (nextIndex + 1 < $tabItems.length) {
        activateTab(nextIndex);
      } else {
        $(this).closest('.auth-inner').find('.reg-form').trigger('submit');
      }
    });
  
    function activateTab(index) {
      if ($tabItems.filter(`[data-index="${index}"]`).data('disabled') === 'disabled') return activateTab(index + 1);
      $tabItems.removeClass('active').hide();
      $tabItems.filter(`[data-index="${index}"]`).addClass('active').show();
      $tabButtons.removeClass('active');
      const $activeButton = $tabButtons.filter(`[value="${index}"]`).addClass('active');
      const $tabsContainer = $activeButton.closest('.tabs');
  
      if ($tabsContainer.length && $activeButton.length) {
        const container = $tabsContainer.get(0);
        const button = $activeButton.get(0);
        const offsetLeft = button.offsetLeft;
        const scrollTo = offsetLeft - (container.clientWidth / 2) + (button.offsetWidth / 2);
        $tabsContainer.animate({ scrollLeft: scrollTo }, 300);
      }
  
      currentTabIndex = index;
      updateStepButtonState(index);
      toggleBusinessItem(index);
    }
  
    function updateStepButtonState(index) {
      const $tab = $tabItems.filter(`[data-index="${index}"]`);
      let isValid = true;
  
      if (index === 2) {
        const fileInput = $tab.find('input[type="file"]')[0];
        isValid = fileInput && fileInput.files && fileInput.files.length > 0;
      } else if (index === 4) {
        $tab.find('.contact-item').each(function () {
          const isChecked = $(this).find('.slide-btn input[type="checkbox"]').prop('checked');
          if (isChecked) {
            const $inputs = $(this).find('.contact-item-form input[type="text"]').filter(':visible');
            const filled = $inputs.toArray().every(input => {
              const value = $(input).val();
              return value !== undefined && value !== null && value.trim() !== '';
            });
            if (!filled) {
              isValid = false;
              return false;
            }
          }
        });
      } else {
        const $visibleBusinessItem = $tab.find(`.business-type-item[data-index="${selectedBusinessIndex}"]`);
        const $inputs = $visibleBusinessItem.length
          ? $visibleBusinessItem.find('input[type="text"], input[type="email"]').filter(':visible')
          : $tab.find('input[type="text"], input[type="email"]').filter(':visible');
        isValid = $inputs.toArray().every(input => {
          const value = $(input).val();
          return value !== undefined && value !== null && value.trim() !== '';
        });
      }
  
      $tab.find('.next-tab .button').toggleClass('disabled', !isValid);
      $('.next-tab-mobile .button').toggleClass('disabled', !isValid);
      return isValid;
    }
  
    function toggleBusinessItem(index) {
      const $tab = $tabItems.filter(`[data-index="${index}"]`);
      $tab.find('.business-type-item').hide();
      $tab.find(`.business-type-item[data-index="${selectedBusinessIndex}"]`).show();
    }
  
    $tabButtons.on('click', function () {
      const targetIndex = Number($(this).val());
      const isValid = updateStepButtonState(currentTabIndex);
      if (targetIndex > currentTabIndex && !isValid) return;
      activateTab(targetIndex);
    });
  
    $nextButtons.on('click', function () {
      if ($(this).val() === 'edit') {
        activateTab($tabItems.length - 1);
        return;
      }
      const isValid = updateStepButtonState(currentTabIndex);
      if (!isValid) return;
  
      const nextIndex = currentTabIndex + 1;
      if (nextIndex < $tabItems.length) {
        activateTab(nextIndex);
  
        if (nextIndex === 2) {
          $('.business-type-quest .quest-checkbox input').prop('disabled', true);
          $('.business-type-quest .quest-checkbox').addClass('disabled');
        }
      } else {
        $(this).closest('form').trigger('submit');
      }
    });
  
    $tabItems.find('input').on('input change', function () {
      const $tab = $(this).closest('.tab-item');
      const index = $tab.data('index');
      updateStepButtonState(index);
    });
  
    function updateTabBtn(isLLC) {
      const $isllcInputs = $('.check-item').find('[data-type="llc"]');
      const $llcTab = $('.llc-tab');
      const $lastTab = $('.reg-partners-tabs .tab-btn').last();
      if ($tabBtnRegPartners.length) {
        $('.reg-partners-tabs .tab-btn').remove();
        if (!isLLC) {
          const updateTabBtn = $tabBtnRegPartners.filter(tab => {
            return $($tabBtnRegPartners[tab]).data('type') !== 'llc';
          });
          for (let i = 0; i < updateTabBtn.length; i++) {
            $(updateTabBtn[i]).find('span').text(`Шаг ${i + 1}`);
            $('.reg-partners-tabs').append(updateTabBtn[i]);
          }
          $lastTab.data('index', '4');
          $llcTab.attr('data-disabled', 'disabled');
          $isllcInputs.hide();
        } else {
          for (let i = 0; i < $tabBtnRegPartners.length; i++) {
            $($tabBtnRegPartners[i]).find('span').text(`Шаг ${i + 1}`);
            $('.reg-partners-tabs').append($tabBtnRegPartners[i]);
          }
          $isllcInputs.show();
          $llcTab.removeAttr('data-disabled');
        }
      }
    }
  
    $('.business-type-quest .quest-checkbox input').on('change', function () {
      const $checkbox = $(this);
      const $all = $checkbox.closest('.flex').find('input');
      $all.not($checkbox).prop('checked', false);
      selectedBusinessIndex = $checkbox.closest('label').index();
      toggleBusinessItem(currentTabIndex);
      const isIP = selectedBusinessIndex === 1;
      $('.select-business-type .question:contains("НПД")').toggle(isIP);
      $('.business-type-output').text($checkbox.siblings('span').text());
      const isLLC = $checkbox.val() === 'llc';
      updateTabBtn(isLLC);
      updateStepButtonState(currentTabIndex);
    });
  
    $('.date-input').attr('placeholder', '**.**.****');
    $('.date-input').val('');
  
    $('.open-calendar').on('click', function () {
      const $container = $(this).closest('.date-container');
      const $input = $container.find('.date-input');
      if (!$input.hasClass('flatpickr-init')) {
        $input.addClass('flatpickr-init');
      }
      $input.focus();
    });
  
    $('.back').click(function (e) {
      if (currentTabIndex > 0) {
        e.preventDefault();
        activateTab(currentTabIndex - 1);
      }
    });
  
    activateTab(0);
  });
  
    $('.view-type-btn')?.on('click', function() {
    if($(this).val() === 'list') {
        $('.catalog-detail-products').find('.product-item').addClass('vertical');
        $('.catalog-detail-products').addClass('column-1');
    } else {
        $('.catalog-detail-products').find('.product-item').removeClass('vertical');
    }
    $('.view-type-btn').removeClass('active');
    $(this).toggleClass('active');
    $('.catalog-detail-products').removeClass('column-3').removeClass('column-2').removeClass('column-1');
    $('.catalog-detail-products').addClass('column-' + $(this).val());
});

if(window.innerWidth < 1024) {
    $('.view-type-btn[value="2"]').trigger('click');
}
    const searchContainer = $('.search-result');
const searchInput = $('.search-form').find('input[type="text"]');
const searchInContainer = $('.search-result').find('.search-form');
const positionedSearch = $('.position-search');

let initialSearchTop = 0;

if ($(searchContainer).get(0)) {
    const oldSearch = $(searchContainer).find('.old-search');
    const searchProducts = $(searchContainer).find('.search-products');
    const searchRemoveBtn = $(searchContainer).find('.old-search-item .remove-btn');
    const searchCloseBtn = $(searchContainer).find('.close-search');
    const searchDropdown = $('.search-form').find('.search-dropdown');
    $(document).ready(function () {
        if (searchInput.closest('.catalog-main-search').length) {
            const rect = positionedSearch.get(0).getBoundingClientRect();
            initialSearchTop = rect.top;
            searchInContainer.css('top', initialSearchTop + 'px');
        }
    });

    $(searchRemoveBtn).on('click', function (e) {
        e.stopPropagation();
        $(this).closest('.old-search-item').remove();
        $(searchInput).focus();
    });

    searchInput.on('input', function (e) {
        e.stopPropagation();
        const searchValue = $(this).val();
        if ($(window).width() < 1024) {
            $(searchContainer).show();
            if (searchValue.length > 0) {
                $(oldSearch).hide();
                $(searchProducts).css('display', 'grid');
            } else {
                $(oldSearch).show();
                $(searchProducts).hide();
            }
        } else {
            $(searchDropdown).slideDown(500);
        }
    });

    searchInput.on('click', function (e) {
        if ($(window).width() < 1024) {
            $(searchContainer).show();
            $('html, body').animate({ scrollTop: 0 });
            $(searchContainer).animate({ scrollTop: 0 });
            $(searchContainer).addClass('active');

            searchInContainer.css('top', '0');

            $(searchContainer).find('input[type="text"]').val($(searchInput).val());
            $(searchContainer).find('input[type="text"]').focus();

            if (searchInput.closest('.catalog-main-search').length) {
                if ($(searchInput).val().length > 0) {
                    setTimeout(() => {
                        $(searchProducts).css('display', 'grid');
                        $(oldSearch).hide();
                    }, 300);
                } else {
                    setTimeout(() => {
                        $(oldSearch).show();
                        $(searchProducts).hide();
                    }, 300);
                }
            } else {
                if ($(searchInput).val().length > 0) {
                    $(searchProducts).css('display', 'grid');
                    $(oldSearch).hide();
                } else {
                    $(oldSearch).show();
                    $(searchProducts).hide();
                }
            }
        } else {
            $(searchDropdown).slideDown(500);
        }
        e.stopPropagation();

        $('body').click(function () {
            $(oldSearch).hide();
            closeSearch();
            $(searchProducts).hide();
            $(searchDropdown).slideUp(500);
        });
    });

    $(searchCloseBtn).on('click', function (e) {
        closeSearch();
        $(oldSearch).hide();
        $(searchProducts).hide();
        $(searchDropdown).slideUp(500);
    });
}

const closeSearch = () => {
    $(searchContainer).removeClass('active');
    $(searchContainer).hide();
    $(searchInput).val($(searchContainer).find('input[type="text"]').val());
    $('.search-result').find('.search-form').css('top', initialSearchTop + 'px');
};

    const reviewModal = $('#add-review-modal');

if (reviewModal.length) {
    const submitButton = reviewModal.find('.add-review-modal-submit .button');
    const title = reviewModal.find('.add-review-modal-title');
    const etapItems = reviewModal.find('.add-review-etap-item');
    const selectProduct = reviewModal.find('.select-product');
    const productsList = reviewModal.find('.products-list');
    const reviewBody = reviewModal.find('.review-body');
    const productBtn = selectProduct.find('.select-product-btn');
    const reviewTextInput = reviewModal.find('.input-text textarea');
    const reviewCallback = reviewBody.find('.review-callback');
    const reviewLike = reviewBody.find('.review-like');
    const stars = $('.rating-stars .star');
    const modalContainer = reviewModal.find('.add-review-modal-container');
    let selectedProduct = null;
    let currentRating = 0;

    function isMobile() {
        return window.innerWidth < 1024;
    }

    function openReviewModal() {
        if (isMobile()) {
            $('body').addClass('_lock');
            reviewModal.addClass('visible').removeClass('closing');
            modalContainer.css({
                transform: 'translateY(0)',
                transition: 'transform 0.3s ease'
            });
        } else {
            reviewModal.css('display', 'flex');
            $('body').addClass('_lock');
        }
    }

    function closeReviewModal() {
        if (isMobile()) {
            reviewModal.addClass('closing');
            modalContainer.css('transform', 'translateY(100%)');
            setTimeout(() => {
                reviewModal.removeClass('visible closing');
                modalContainer.css({ transform: '', transition: '' });
                $('body').removeClass('_lock');
            }, 300);
        } else {
            reviewModal.css('display', 'none');
            $('body').removeClass('_lock');
        }
    }

    $('.add-review-btn').on('click', function (e) {
        e.preventDefault();
        openReviewModal();
        currentRating = 0;
        renderRating(currentRating);
        openEtap(selectProduct);
        $('.review-body input[type="text"]').val('');
        $('#add-review-modal input[type="checkbox"]').prop('checked', false);
        selectProduct.find('.select-product-btn').css('display', 'flex');
        selectProduct.find('.products-list-item').remove();
        selectProduct.removeClass('is-selected');
    });

    $(".add-review-modal-close").on('click', function (e) {
        e.preventDefault();
        closeReviewModal();
    });

    reviewModal.on('click', function (e) {
        if (!$(e.target).closest('.add-review-modal-container').length) {
            closeReviewModal();
        }
    });

    function openEtap(el) {
        etapItems.hide();
        el.show();
    }

    function resetRating() {
        currentRating = 0;
        renderRating(currentRating);
        reviewCallback.hide();
        reviewLike.hide();
    }

    function updateSubmitButtonState() {
        const starSet = currentRating > 0;
        const textFilled = reviewTextInput.val()?.trim()?.length > 0;

        if (reviewBody.is(':visible')) {
            starSet && textFilled
                ? submitButton.removeClass('disabled')
                : submitButton.addClass('disabled');
        } else if (productsList.is(':visible')) {
            const oneSelected = productsList.find('input[type="checkbox"]:checked').length === 1;
            oneSelected
                ? submitButton.removeClass('disabled')
                : submitButton.addClass('disabled');
        } else {
            submitButton.addClass('disabled');
        }
    }

    function renderRating(rating) {
        if(rating > 2) {
            $('.review-like').show()
            $(".review-callback").hide()
        } else {
            $('.review-like').hide()
            $(".review-callback").show()
        }
        stars.each(function () {
            const star = $(this);
            const value = parseFloat(star.data('value'));

            star.removeClass('filled half-filled');

            if (rating >= value) {
                star.addClass('filled');
            } else if (rating + 0.5 === value) {
                star.addClass('half-filled');
            }
        });
    }

    if (productsList.length) {
        const stopEvents = ['click', 'touchstart', 'mousedown', 'wheel'];

        stopEvents.forEach(evt => {
            productsList.on(evt, function (e) {
                e.stopPropagation();
            });
        });
    }

    if (reviewBody.length) {
        const stopEvents = ['click', 'touchstart', 'mousedown', 'wheel'];

        stopEvents.forEach(evt => {
            reviewBody.on(evt, function (e) {
                e.stopPropagation();
            });
        });
    }

    stars.find('.half').on('mousemove', function () {
        const isLeft = $(this).hasClass('left');
        const value = parseFloat($(this).closest('.star').data('value'));
        const hoverValue = isLeft ? value - 0.5 : value;
        renderRating(hoverValue);
    });

    $('.rating-stars').on('mouseleave', function () {
        renderRating(currentRating);
    });

    stars.find('.half').on('click', function () {
        const isLeft = $(this).hasClass('left');
        const value = parseFloat($(this).closest('.star').data('value'));
        currentRating = isLeft ? value - 0.5 : value;
        renderRating(currentRating);
        updateSubmitButtonState();
    });

    if (isMobile()) {
        const starsContainer = $('.rating-stars');

        starsContainer.css({
            '-webkit-tap-highlight-color': 'transparent',
            'touch-action': 'none'
        });

        let touchActive = false;

        starsContainer.on('touchstart', function (e) {
            touchActive = true;
            updateTouchRating(e);
        });

        starsContainer.on('touchmove', function (e) {
            if (!touchActive) return;
            updateTouchRating(e);
        });

        starsContainer.on('touchend', function () {
            touchActive = false;
        });

        function updateTouchRating(e) {
            const touch = e.originalEvent.touches[0];
            const offset = starsContainer.offset();
            const relativeX = touch.clientX - offset.left;
            const containerWidth = starsContainer.width();
            const fullValue = (relativeX / containerWidth) * 5;

            let value = Math.round(fullValue * 2) / 2;

            if (value < 0) value = 0;
            if (value > 5) value = 5;

            currentRating = value;

            renderRating(currentRating);
            updateSubmitButtonState();
        }
    }


    reviewTextInput.on('input', function () {
        updateSubmitButtonState();
    });

    openEtap(selectProduct);
    updateSubmitButtonState();

    productBtn.on('click', function (e) {
        e.preventDefault();
        openEtap(productsList);
        updateSubmitButtonState();
    });

    productsList.find('input[type="checkbox"]').on('change', function () {
        selectedProduct = $(this).closest('.products-list-item').clone();
        updateSubmitButtonState();
    });

    $('.products-list-item .input-checkbox').on('change', function () {
        const checkedCount = productsList.find('input[type="checkbox"]:checked').length;
        console.log(checkedCount);

        if (checkedCount > 0) {
            submitButton.removeClass('disabled');
        } else {
            submitButton.addClass('disabled');
        }
    });

    submitButton.on('click', function (e) {
        e.preventDefault();
        if ($(this).hasClass('disabled')) return;

        if (productsList.is(':visible')) {
            selectProduct.find('.select-product-btn').hide();
            selectProduct.append(selectedProduct);
            selectProduct.addClass('is-selected');
            title.text('Новый отзыв');
            openEtap(selectProduct);
            submitButton.removeClass('disabled');
        } else if (selectProduct.is(':visible')) {
            resetRating();
            openEtap(reviewBody);
            updateSubmitButtonState();
        } else if (reviewBody.is(':visible')) {
            if (currentRating > 0 && reviewTextInput.val().trim().length > 0) {
                closeReviewModal();
                $('.reviews .add-review-message').css('display', 'flex');
                setTimeout(() => {
                    $('.reviews .add-review-message').css('display', 'none');
                }, 2000);
            }
        }
    });

    reviewModal.find('.add-review-images-item').each(function () {
        const imageItem = $(this);
        const fileInput = imageItem.find('input[type="file"]');
        const previewImg = imageItem.find('img');
        const removeBtn = imageItem.find('.remove-btn');
        const placeholderSrc = 'img/reviews-placeholder.png';
        const inputFileLabel = imageItem.find('label.input-file');

        fileInput.on('change', function (e) {
            const file = e.target.files[0];
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function (event) {
                    previewImg.attr('src', event.target.result);
                    inputFileLabel.hide();
                    previewImg.closest('.img').show();
                };
                reader.readAsDataURL(file);
            }
        });

        $('.delete-img-modal-submit').on('click', function (e) {
            e.stopPropagation();
        });

        removeBtn.on('click', function (e) {
            e.preventDefault();
            $('.delete-img-modal').show();
            $('.delete-img-modal-submit').on('click', function (e) {
                e.preventDefault();
                $('.delete-img-modal').hide();
                fileInput.val('');
                previewImg.attr('src', placeholderSrc);
                inputFileLabel.show();
                previewImg.closest('.img').hide();
            });
            $('.close-delete-img-modal').on('click', function (e) {
                e.stopPropagation();
                $('.delete-img-modal').hide();
            });
        });
    });

    $('.review-edit-btn').on('click', function (e) {
        e.preventDefault();
        openReviewModal();
        $('.add-review-etap-item').hide();
        $('.review-body').show();

        currentRating = 4;
        renderRating(currentRating);

        $('.review-callback').hide();
        $('.review-like').show();

        const tagsToCheck = ['Отличное здоровье животных', 'Уход и содержание'];
        $('.review-like .tag-item').each(function () {
            const label = $(this);
            const text = label.find('.tag').text().trim();
            if (tagsToCheck.includes(text)) {
                label.find('input').prop('checked', true);
            } else {
                label.find('input').prop('checked', false);
            }
        });

        $('.review-body input[type="text"]').val('Спасибо, всё было отлично!');
    });

    if (isMobile()) {
        let startY = 0;
        let currentY = 0;
        let dragging = false;
        let threshold = window.innerHeight * 0.25;

        modalContainer.on('touchstart', function (e) {
            if (e.originalEvent.touches.length !== 1) return;
            dragging = true;
            startY = e.originalEvent.touches[0].clientY;
            currentY = startY;
            modalContainer.css('transition', 'none');
        });

        modalContainer.on('touchmove', function (e) {
            if (!dragging) return;
            currentY = e.originalEvent.touches[0].clientY;
            const deltaY = currentY - startY;

            if (deltaY > 0) {
                modalContainer.css('transform', `translateY(${deltaY}px)`);
            }
        });

        modalContainer.on('touchend', function () {
            if (!dragging) return;
            dragging = false;
            const deltaY = currentY - startY;
            modalContainer.css('transition', 'transform 0.3s ease');

            if (deltaY > threshold) {
                closeReviewModal();
            } else {
                modalContainer.css('transform', 'translateY(0)');
            }
        });
    }

}

    const complainModal = $('.complain-modal');

if (complainModal.length) {
    const openBtn = $('.open-complain-btn');
    const closeBtn = complainModal.find('.close-btn');
    const confirmBtn = complainModal.find('.confirm-btn');
    const modalContainer = complainModal.find('.complain-modal-container');
    const complainMessage = $('.reviews .complain-message');

    function isMobile() {
        return window.innerWidth < 1024;
    }

    function openModal() {
        if (isMobile()) {
            complainModal.show();
            $('body').addClass('_lock');
            requestAnimationFrame(() => {
                complainModal.addClass('visible').removeClass('closing');
                modalContainer.css({
                    transform: 'translateY(0)',
                    transition: $(window).width() < 1024 ? 'transform 0.3s ease' : ''
                });
            });
        } else {
            complainModal.show();
            $('body').addClass('_lock');
        }
    }

    function closeModal() {
        if (isMobile()) {
            complainModal.addClass('closing');
            modalContainer.css('transform', 'translateY(100%)');
            setTimeout(() => {
                complainModal.removeClass('visible closing');
                complainModal.hide();
                modalContainer.css({ transform: '', transition: '' });
                $('body').removeClass('_lock');
            }, 300);
        } else {
            complainModal.hide();
            $('body').removeClass('_lock');
        }
    }

    openBtn.on('click', openModal);
    closeBtn.on('click', closeModal);

    complainModal.on('click', function (e) {
        if (!$(e.target).closest('.complain-modal-container').length) {
            closeModal();
        }
    });

    confirmBtn.on('click', function () {
        closeModal();
        complainMessage.css('display', 'flex');
        setTimeout(() => {
            complainMessage.css('display', 'none');
        }, 2000);
    });

    if (isMobile()) {
        let startY = 0;
        let currentY = 0;
        let dragging = false;

        modalContainer.on('touchstart', function (e) {
            if (e.originalEvent.touches.length !== 1) return;
            dragging = true;
            startY = e.originalEvent.touches[0].clientY;
            modalContainer.css('transition', 'none');
        });

        modalContainer.on('touchmove', function (e) {
            if (!dragging) return;
            currentY = e.originalEvent.touches[0].clientY;
            const deltaY = currentY - startY;
            if (deltaY > 0) {
                modalContainer.css('transform', `translateY(${deltaY}px)`);
            }
        });

        modalContainer.on('touchend', function () {
            if (!dragging) return;
            dragging = false;
            const deltaY = currentY - startY;
            const threshold = window.innerHeight * 0.4;
            if($(window).width() < 1024) {
                modalContainer.css('transition', 'transform 0.3s ease');
            }
            if (deltaY > threshold) {
                closeModal();
            } else {
                modalContainer.css('transform', 'translateY(0)');
            }
        });
    }
}

    
    const cartModal = $('.cart-modal');

if (cartModal.length) {
    const cartModalClose = cartModal.find('.cart-modal-close');
    const openCartModalBtn = $(".open-cart-modal");
    const modalContainer = cartModal.find('.cart-modal-container');

    function isMobile() {
        return window.innerWidth < 1024;
    }

    openCartModalBtn.on("click", function () {
        if (isMobile()) {
            cartModal.removeClass('closing').addClass('visible');
        } else {
            cartModal.css('display', 'block');
        }
    });

    cartModalClose.on("click", function () {
        if (isMobile()) {
            closeModalSmoothly();
        } else {
            cartModal.css('display', 'none');
        }
    });

    if (isMobile()) {
        let startY = 0;
        let currentY = 0;
        let isDragging = false;

        const thresholdPercent = 0.4;

        modalContainer.on('touchstart', function (e) {
            e.stopPropagation();
            if (e.originalEvent.touches.length !== 1) return;
            isDragging = true;
            startY = e.originalEvent.touches[0].clientY;
            modalContainer.css('transition', 'none');
        });

        modalContainer.on('touchmove', function (e) {
            e.stopPropagation();
            if (!isDragging) return;
            currentY = e.originalEvent.touches[0].clientY;
            const deltaY = currentY - startY;
            if (deltaY > 0) {
                modalContainer.css('transform', `translateY(${deltaY}px)`);
            }
        });

        modalContainer.on('touchend', function (e) {
            e.stopPropagation();
            if (!isDragging) return;
            isDragging = false;

            const draggedPercent = (currentY - startY) / window.innerHeight;

            modalContainer.css('transition', 'transform 0.3s ease');

            if (draggedPercent > thresholdPercent) {
                closeModalSmoothly();
            } else {
                modalContainer.css('transform', 'translateY(0)');
            }
        });

        cartModal.on('click', function (e) {
            if (!$(e.target).closest('.cart-modal-container').length) {
                closeModalSmoothly();
            }
        });
    } else {
        cartModal.on('click', function () {
            cartModal.css('display', 'none');
        });
        modalContainer.on('click', function (e) {
            e.stopPropagation();
        });
    }

    function closeModalSmoothly() {
        cartModal.addClass('closing');
        modalContainer.css('transform', 'translateY(100%)');
        setTimeout(() => {
            cartModal.removeClass('visible closing');
            modalContainer.css({
                transform: '',
                transition: ''
            });
        }, 300);
    }
}

    const cart = $('.cart');

if(cart.length) {
    const cartLikeButtons = $(cart).find('.product-action-like');
    const cartDeleteButtons = $(cart).find('.product-action-delete');
    const messageContainer = $(cart).find('.message-container');

    $(cartLikeButtons).on('click', function() {
        $(messageContainer).show()
        $(messageContainer).find('.add-wishlist-message').css('display', 'flex');
        setTimeout(() => {
            $(messageContainer).hide()
            $(messageContainer).find('.add-wishlist-message').css('display', 'none');
        }, 2000);
    })

    $(cartDeleteButtons).on('click', function() {
        $(messageContainer).find('.delete-message').css('display', 'flex');
        $(messageContainer).show()
        setTimeout(() => {
            $(messageContainer).hide()
            $(messageContainer).find('.delete-message').css('display', 'none');
        }, 2000);
    })
}

    const addressModal = $('.address-modal');

if (addressModal.length) {
    const changeBtn = addressModal.find('.change-btn');
    const saveBtn = addressModal.find('.save-btn');
    const closeBtn = addressModal.find('.close-btn');
    const confirmBtn = addressModal.find('.confirme-btn');
    const addNewAddress = addressModal.find('.add-new-address');
    const backBtn = addressModal.find('.back');
    const openBtn = $('.open-address-modal');
    const addressMap = addressModal.find('.address-modal-map');
    const addressSelect = addressModal.find('.address-modal-select');
    const addressCreate = addressModal.find('.address-modal-create');
    const selectAddressOptions = addressSelect.find('.address-modal-select-item input');
    const modalContainer = addressModal.find('.address-modal-container');

    function isMobile() {
        return window.innerWidth < 1024;
    }

    function closeModal() {
        $(addressModal).find('input').val('');
        if (isMobile()) {
            addressModal.addClass('closing');
            modalContainer.css('transform', 'translateY(100%)');
            setTimeout(() => {
                addressModal.removeClass('visible closing');
                modalContainer.css({ transform: '', transition: '' });
                $('body').css('overflow', 'auto');
            }, 300);
        } else {
            addressModal.hide();
            $('body').css('overflow', 'auto');
        }
    }

    backBtn.on('click', function () {
        if (addressSelect.is(':visible')) {
            addressMap.show();
            addressCreate.hide();
            addressSelect.hide();
            backBtn.removeClass('active');
            changeBtn.show();
            saveBtn.hide();
            confirmBtn.show();
        } else if (addressCreate.is(':visible')) {
            addressMap.hide();
            addressCreate.hide();
            addressSelect.show();
            changeBtn.hide();
            saveBtn.css('display', 'flex');
            confirmBtn.hide();
            backBtn.addClass('active');
        }
    });

    openBtn.on('click', function () {
        addressMap.show();
        addressCreate.hide();
        addressSelect.hide();
        backBtn.removeClass('active');

        if (isMobile()) {
            addressModal.addClass('visible').removeClass('closing');
            modalContainer.css({
                transform: 'translateY(100%)',
                transition: 'none'
            });

            setTimeout(() => {
                modalContainer.css({
                    transform: 'translateY(0)',
                    transition: 'transform 0.3s ease'
                });
            }, 20);
        } else {
            addressModal.show();
        }

        $('body').css('overflow', 'hidden');
    });

    closeBtn.on('click', closeModal);

    changeBtn.on('click', function () {
        addressMap.hide();
        addressCreate.hide();
        addressSelect.show();
        changeBtn.hide();
        saveBtn.css('display', 'flex');
        confirmBtn.hide();
        backBtn.addClass('active');
    });

    confirmBtn.on('click', function () {
        $(closeBtn).trigger('click');
    });

    saveBtn.on('click', function () {
        if (addressSelect.is(':visible')) {
            let hasChecked = false;
            selectAddressOptions.each(function () {
                if ($(this).prop('checked')) hasChecked = true;
            });
            if (hasChecked) $(closeBtn).trigger('click');
        } else if (addressCreate.is(':visible')) {
            const inputs = addressCreate.find('input').filter(':visible');
            const allFilled = inputs.toArray().every(input => $(input).val().trim() !== '');
            if (allFilled) {
                $(closeBtn).trigger('click');
            } else {
                inputs.each(function () {
                    $(this).toggleClass('error', !$(this).val().trim());
                });
            }
        }
    });

    addNewAddress.on('click', function () {
        addressMap.hide();
        addressCreate.show();
        addressSelect.hide();
        saveBtn.css('display', 'flex');
        confirmBtn.hide();
        changeBtn.hide();
        backBtn.addClass('active');
    });

    addressModal.find('.address-modal-container').on('click', function (e) {
        e.stopPropagation();
    });

    addressModal.on('click', function (e) {
        if (!$(e.target).closest('.address-modal-container').length) {
            closeModal();
        }
    });

    if (isMobile()) {
        let startY = 0;
        let currentY = 0;
        let dragging = false;

        modalContainer.on('touchstart', function (e) {
            if (e.originalEvent.touches.length !== 1) return;
            dragging = true;
            startY = e.originalEvent.touches[0].clientY;
            modalContainer.css('transition', 'none');
        });

        modalContainer.on('touchmove', function (e) {
            if (!dragging) return;
            currentY = e.originalEvent.touches[0].clientY;
            const deltaY = currentY - startY;
            if (deltaY > 0) {
                modalContainer.css('transform', `translateY(${deltaY}px)`);
            }
        });

        modalContainer.on('touchend', function () {
            if (!dragging) return;
            dragging = false;
            const deltaY = currentY - startY;
            const threshold = window.innerHeight * 0.4;
            modalContainer.css('transition', 'transform 0.3s ease');

            if (deltaY > threshold) {
                closeModal();
            } else {
                modalContainer.css('transform', 'translateY(0)');
            }
        });
    }
}

    const question = $('#question');

if (question.length) {
    const questionCheckboxes = $(question).find('.quest-checkbox');
    const nextEtap = $(question).find('.next-etap');
    const backEtap = $(question).find('.back-etap');
    const back = $(question).find('.back');
    const questionEtap = $(question).find('.question-item');
    const paginationContainer = $(question).find('.question-swiper-pagination');
    const paginationItems = $(paginationContainer).find('span');

    const getActiveEtap = () => {
        let activeEtap = null;
        let activeEtapIndex = null;
        for (let i = 0; i < questionEtap.length; i++) {
            if ($(questionEtap[i]).hasClass('active')) {
                activeEtap = $(questionEtap[i]);
                activeEtapIndex = i;
            }
        }
        return {
            activeEtap,
            activeEtapIndex
        };
    }

    $(questionCheckboxes).click(function () {
        $(this).toggleClass('active');
        if ($(this).closest('.one-checked').length) {
            $(this).siblings('.quest-checkbox').removeClass('active');
        }
    });

    $(backEtap).click(function () {
        const { activeEtap, activeEtapIndex } = getActiveEtap();
        if (activeEtap && activeEtapIndex > 0) {
            $(activeEtap).prev().addClass('active');
            $(activeEtap).removeClass('active');
            $(paginationItems[activeEtapIndex]).removeClass('active');
            $(paginationItems[activeEtapIndex - 1]).addClass('active');
        }
    });

    $(back).click(function (e) {
        e.preventDefault();
        const { activeEtap, activeEtapIndex } = getActiveEtap();
        if (activeEtap && activeEtapIndex > 0) {
            $(activeEtap).prev().addClass('active');
            $(activeEtap).removeClass('active');
            $(paginationItems[activeEtapIndex]).removeClass('active');
            $(paginationItems[activeEtapIndex - 1]).addClass('active');
        } else if (activeEtapIndex - 1 < 0) {
            window.location.href = 'catspinner.html';
        }
    });

    $(nextEtap).click(function () {
        const { activeEtap, activeEtapIndex } = getActiveEtap();
        if (!activeEtap) return;

        const checkboxes = $(activeEtap).find('input[type="checkbox"]');
        const hasCheckboxes = checkboxes.length > 0;
        const anyChecked = checkboxes.is(':checked');

        const hasRange = $(activeEtap).find('.noUi-target').length > 0;

        if ((hasCheckboxes && anyChecked) || (!hasCheckboxes && hasRange)) {
            if (activeEtapIndex < questionEtap.length - 1) {
                $(activeEtap).next().addClass('active');
                $(activeEtap).removeClass('active');
                $(paginationItems[activeEtapIndex + 1]).addClass('active');
            } else {
                window.location.href = 'matching.html';
            }
        }
    });
}


const singleSlider = document.querySelector('.range-quest .noui-single');
if (singleSlider) {
    const isMobile = window.innerWidth < 1024;

    if (isMobile) {
        noUiSlider.create(singleSlider, {
            start: 10,
            connect: [true, false],
            range: {
                min: 0,
                max: 100
            },
            orientation: 'vertical',
            direction: 'ltr'
        });
    } else {
        noUiSlider.create(singleSlider, {
            start: 10,
            connect: [true, false],
            range: {
                min: 0,
                max: 100
            },
            orientation: 'horizontal',
            direction: 'ltr'
        });
    }


    const parent = $(singleSlider).closest('.range-quest');
    const buttons = parent.find('.range-quest-buttons button');
    const output = parent.find('.range-output input');

    singleSlider.noUiSlider.on('update', function (values) {
        const value = parseFloat(values[0]);
        output.val(value);

        buttons.removeClass('active');
        if (value <= 25) {
            buttons.eq(0).addClass('active');
        } else if (value <= 50) {
            buttons.eq(1).addClass('active');
        } else if (value <= 75) {
            buttons.eq(2).addClass('active');
        } else {
            buttons.eq(3).addClass('active');
        }
    });

    output.on('input change', function () {
        const val = parseFloat($(this).val());
        if (!isNaN(val)) {
            singleSlider.noUiSlider.set(val);
        }
    });
}

const initDoubleSlider = (sliderId) => {
    const el = document.getElementById(sliderId);
    if (!el) return;

    noUiSlider.create(el, {
        start: [0, 100],
        connect: true,
        range: {
            min: 0,
            max: sliderId === 'time-range-noui' ? 24 : 100
        }
    });

    const parent = $(el).closest('.two-step-range');
    const inputs = parent.find('.range-output input');

    el.noUiSlider.on('update', function (values) {
        inputs.eq(0).val(Math.round(values[0]));
        inputs.eq(1).val(Math.round(values[1]));
    });

    inputs.each(function (index) {
        $(this).on('input change', function () {
            let from = parseFloat(inputs.eq(0).val());
            let to = parseFloat(inputs.eq(1).val());

            const min = el.noUiSlider.options.range.min;
            const max = el.noUiSlider.options.range.max;

            from = isNaN(from) ? min : Math.min(Math.max(from, min), max);
            to = isNaN(to) ? max : Math.min(Math.max(to, min), max);

            if (from > to) {
                if (index === 0) {
                    from = to;
                } else {
                    to = from;
                }
            }

            el.noUiSlider.set([from, to]);
        });
    });

};

initDoubleSlider('weight-range-noui');
initDoubleSlider('time-range-noui');
    const matching = $('.matching');

if (matching.length) {
    const education = $('.education-inner');
    const DESKTOP_WIDTH = 1024;

    if (education.length) {
        const DESKTOP_WIDTH = 1024;
        const isMobile = () => window.innerWidth <= DESKTOP_WIDTH;

        const getVisibleItems = () => {
            return isMobile()
                ? $('.education-item.mobile')
                : $('.education-item.desktop');
        };

        const showNextEducation = () => {
            const items = getVisibleItems();
            const activeItem = items.filter('.active');

            if (!activeItem.length) return;

            const currentIndex = Number(activeItem.data('index'));
            if (currentIndex === 4 && $(window).width() > 1024) {
                $('.matching-title .button').css('z-index', '100');
            }else {
                $('.matching-title .button').css('z-index', '0');
            }
            const nextItem = items.filter((_, el) => Number($(el).data('index')) === currentIndex + 1);

            activeItem.removeClass('active');

            if (nextItem.length) {
                nextItem.addClass('active');
            } else {
                education.closest('.education').hide();
            }

            if (isMobile()) {
                $('.button-placeholder').hide();
                $(`.button-placeholder[data-index="${currentIndex + 1}"]`).css('display', 'flex');

                if (currentIndex === 1) {
                    $('.card-item').removeClass('educationed-like');
                    $('.overlay').show();
                }

                if (currentIndex === 2) {
                    $('.card-item').last().addClass('educationed-nope');
                    $('.overlay').hide();
                } else {
                    $('.card-item').removeClass('educationed-nope');
                    $('.overlay').show();
                }
            }
        };

        if (isMobile()) {
            const buttonPlaceholders = $('.button-placeholder');
        
            $(buttonPlaceholders).each(function () {
                if ($(this).hasClass('read-more-btn')) return;
        
                const placeholder = $(this);
                const positionClass = placeholder.data('position');
        
                const positionedElem = $(`.card-item .${positionClass}`);
                if (positionedElem.length) {
                    const rect = positionedElem[0].getBoundingClientRect();
                    placeholder.css({
                        left: `${rect.left}px`,
                        top: `${rect.top}px`
                    });
                }
                placeholder.hide();
            });
        
            $(buttonPlaceholders).click(function () {
                $(this).hide();
                $(this).next().css('display', 'flex');
                showNextEducation();
            });
        
            const items = getVisibleItems();
            const activeItem = items.filter('.active');
            const currentIndex = Number(activeItem.data('index'));
            $(`.button-placeholder[data-index="${currentIndex}"]`).css('display', 'flex');
        
            let touchStartX = 0;
            let touchEndX = 0;
            let touchStartY = 0;
            let touchEndY = 0;
        
            education.on('touchstart', function (e) {
                const touch = e.originalEvent.touches[0];
                touchStartX = touch.clientX;
                touchStartY = touch.clientY;
            });
        
            education.on('touchend', function (e) {
                const touch = e.originalEvent.changedTouches[0];
                touchEndX = touch.clientX;
                touchEndY = touch.clientY;
        
                const diffX = touchEndX - touchStartX;
                const diffY = touchEndY - touchStartY;
        
                const active = getVisibleItems().filter('.active');
                if (!active.hasClass('swipe')) return;
        
                const required = active.data('swipe-direction');
                if (!required) return;
        
                const swipeThreshold = 50;
                let direction = null;
        
                if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > swipeThreshold) {
                    direction = diffX > 0 ? 'right' : 'left';
                } else if (Math.abs(diffY) > swipeThreshold) {
                    direction = diffY < 0 ? 'up' : 'down';
                }
        
                if (!direction) return;
        
                if (direction === 'right' || direction === 'left') {
                    const dirX = direction === 'right' ? 1 : -1;
                    const $card = $('.card-item').last();
                
                    $card.css({
                        transition: 'transform 0.5s ease, opacity 0.3s ease',
                        transform: `translateX(${dirX * 150}vw) rotate(${dirX * 25}deg)`,
                        opacity: '0'
                    });
                
                    setTimeout(() => {
                        $card.css({
                            transform: 'translate(0, 0) rotate(0deg)',
                            opacity: '1',
                            transition: 'none'
                        });
                    }, 600);
                } else if (direction === 'up') {
                    const $cards = $('.cards');
                    $cards.css({
                        top: '-200px'
                    });
                
                    setTimeout(() => {
                        $cards.css({
                            top: '0px'
                        });
                    }, 400);
                }


        
                setTimeout(() => {
                    if (direction === required) {
                        showNextEducation();
                    }
                }, 1000);
            });
        } else {
            const buttonPlaceholders = $('.button-placeholder');
            buttonPlaceholders.each(function (i) {
                if ($(this).hasClass('mobile-placeholder')) return;
                const placeholder = $(this);
                const positionClass = placeholder.data('position');
                const index = placeholder.data('index');
                const positionedElem = $(`.swiper-slide .matching-item .${positionClass}`);
                $(placeholder).attr('data-index', i + 1);
                console.log($(placeholder).attr('data-index'));

                if (positionedElem.length) {
                    const rect = positionedElem[0].getBoundingClientRect();
                    placeholder.css({
                        display: $(placeholder).attr('data-index') === '1' ? 'flex' : 'none',
                        left: `${rect.left}px`,
                        top: `${rect.top}px`
                    });
                }
                if ($(this).attr('data-index') === '1') {
                    positionedElem.css('opacity', '0');
                }
            });
            $(buttonPlaceholders).click(function () {
                const positionClass = $(this).data('position');
                const positionedElem = $(`.swiper-slide .matching-item .${positionClass}`);
                $(positionedElem).css('opacity', '1');
                const positionNextClass = $(this).next().data('position');
                const positionedNextElem = $(`.swiper-slide .matching-item .${positionNextClass}`);
                $(positionedNextElem).css('opacity', '0');
                $(this).hide();
                $(this).next().css('display', 'flex');
                showNextEducation();
            });
        }
        education.on('click', function () {
            const activeItem = getVisibleItems().filter('.active');
            const currentIndex = Number(activeItem.data('index'));

            if ($(window).width() < 1024 && (currentIndex === 8 || currentIndex === 9)) {
                return showNextEducation();
            }

            if (currentIndex >= 5 && $(window).width() > 1024) {
                return showNextEducation();
            }
        });

        $('.matching .catalog-btn').on('click', function (e) {
            if (education.is(':visible')) {
                e.preventDefault();
                const items = getVisibleItems();
                const activeItem = items.filter('.active');
                const currentIndex = Number(activeItem.data('index'));
                if ($(window).width() < 1024 && (currentIndex === 7 || currentIndex === 8)) {
                    showNextEducation();
                }

                if($(window).width() > 1024 && currentIndex === 5) {
                    return showNextEducation();
                }
            }
        });
    }

    if (window.innerWidth > 1024) {
        const matchingLikeBtn = $(matching).find('.reject-btn');
        const matchingRejectBtn = $(matching).find('.like-btn');
        $('.matching-item-img img').css('height', `${$('.matching-item-img').height()}px`);
        window.addEventListener('resize', function () {
            $('.matching-item-img img').css('height', '0');
            $('.matching-item-img img').css('height', `${$('.matching-item-img').height()}px`);
        });
        const swiperMatching = new Swiper('.matching .swiper', {
            allowTouchMove: false,
            loop: true,
            on: {
                slideChangeTransitionEnd() {
                    const activeIndex = swiperMatching.activeIndex;

                    swiperMatching.allowSlidePrev = false;

                    swiperMatching.allowSlideNext = activeIndex < swiperMatching.slides.length - 1;
                }
            }
        });

        $(matchingLikeBtn).on('click', function () {
            swiperMatching.slideNext();
            console.log('like');
        });

        $(matchingRejectBtn).on('click', function () {
            swiperMatching.slideNext();
            swiperMatching.update();
        });
    } else {
        const DECISION_THRESHOLD = 100;
        let startX = 0;
        let startY = 0;
        let card = null;
        let isAnimating = false;
        let tracedX = 0;
        let tracedY = 0;
        let cardCenterY = 0;

        function isButtonClick(e) {
            return e.target.closest('.choice-btn') !== null;
        }

        function startDrag(e) {
            if (isAnimating || isButtonClick(e)) return;

            card = e.target.closest('.card-item');
            if (!card) return;

            card.classList.add('no-transition');

            const rect = card.getBoundingClientRect();
            cardCenterY = rect.top + rect.height / 2;

            startX = e.pageX ?? e.touches?.[0]?.pageX ?? 0;
            startY = e.pageY ?? e.touches?.[0]?.pageY ?? 0;

            document.addEventListener("mousemove", onMove);
            document.addEventListener("mouseup", onMoveEnd);
            document.addEventListener("touchmove", onMove);
            document.addEventListener("touchend", onMoveEnd);
        }

        function onMove(e) {
            if (!card) return;

            const currentX = e.pageX ?? e.touches?.[0]?.pageX ?? 0;
            const currentY = e.pageY ?? e.touches?.[0]?.pageY ?? 0;

            tracedX = currentX - startX;
            tracedY = currentY - startY;

            const cursorY = currentY;
            const isTop = cursorY < cardCenterY;

            const rotateDeg = isTop ? tracedX / 20 : tracedX / 10;

            card.style.transform = `translate(${tracedX}px, ${tracedY}px) rotate(${rotateDeg}deg)`;

            const isRight = tracedX >= 0;
            updateGradient(card, isRight ? "like" : "nope");
        }

        function updateGradient(card, type) {
            const gradientEl = card.querySelector('.card-gradient');
            if (!gradientEl) return;

            gradientEl.classList.remove('like', 'nope');
            if (type) gradientEl.classList.add(type);

            gradientEl.style.opacity = type ? "1" : "0";
        }

        function onMoveEnd() {
            document.removeEventListener("mousemove", onMove);
            document.removeEventListener("mouseup", onMoveEnd);
            document.removeEventListener("touchmove", onMove);
            document.removeEventListener("touchend", onMoveEnd);

            if (!card) return;

            const isRight = tracedX > DECISION_THRESHOLD;
            const isLeft = tracedX < -DECISION_THRESHOLD;

            setTimeout(() => {
                card.classList.remove("no-transition");

                if (isRight || isLeft) {
                    isAnimating = true;

                    const directionX = isRight ? 1 : -1;
                    const offset = window.innerWidth + 200;
                    const rotate = directionX * 40;
                    const finalX = directionX * offset;

                    card.style.transition = 'all 0.5s ease-out';
                    card.style.transform = `translate(${finalX}px, ${tracedY}px) rotate(${rotate}deg)`;
                    card.style.opacity = '0';

                    updateGradient(card, null);

                    card.addEventListener("transitionend", () => {
                        card.remove();
                        isAnimating = false;
                    }, { once: true });

                } else {
                    card.style.transition = 'all 0.2s ease-out';
                    card.style.opacity = '0.4';

                    setTimeout(() => {
                        card.classList.add("reset-state");
                        card.style.transition = 'all 0.4s ease-out';
                        card.style.transform = 'translate(0, 0) rotate(0deg)';
                        card.style.opacity = '1';

                        updateGradient(card, null);

                        card.addEventListener("transitionend", () => {
                            card.removeAttribute("style");
                            card.classList.remove("reset-state", "no-transition");
                            tracedX = 0;
                            tracedY = 0;
                            isAnimating = false;
                        }, { once: true });
                    }, 50);
                }
            }, 50);
        }



        document.addEventListener("mousedown", startDrag);
        document.addEventListener("touchstart", startDrag, { passive: true });

        document.addEventListener("click", (e) => {
            const btn = e.target.closest(".choice-btn");
            if (!btn) return;

            const card = btn.closest(".card-item");
            if (!card) return;

            const isLiked = btn.classList.contains("like");

            const directionX = isLiked ? 1 : -1;
            const rotateDeg = isLiked ? 15 : -15;

            card.style.transition = "transform 0.5s ease, opacity 0.3s ease-out";
            card.style.transform = `translate(${directionX * 120}vw, -50px) rotate(${rotateDeg}deg)`;
            card.style.opacity = '0';

            updateGradient(card, isLiked ? "like" : "nope");

            card.addEventListener("transitionend", () => {
                setTimeout(() => {
                    card.remove();
                }, 150);
            }, { once: true });
        });

        const description = $('.matching-item .description');
        const maxLength = 92;

        description.each(function () {
            const $el = $(this);
            const fullText = $el.text().trim();

            if (fullText.length <= maxLength) return;

            const shortText = fullText.substring(0, maxLength) + '...';

            $el.attr('data-full', fullText);
            $el.attr('data-short', shortText);
            $el.attr('data-expanded', 'false');

            const $btn = $el.find('.more-btn');
            if (!$btn.length) return;

            $el.contents().filter(function () {
                return this.nodeType === 3;
            }).first().replaceWith(shortText);
        });

        $(document).on('click', '.description .more-btn', function () {
            const $btn = $(this);
            const $parent = $btn.closest('.description');
            const isExpanded = $parent.attr('data-expanded') === 'true';

            if (isExpanded) {
                $parent.attr('data-expanded', 'false');
                const shortText = $parent.attr('data-short');
                $parent.contents().filter(function () {
                    return this.nodeType === 3;
                }).first().replaceWith(shortText);
                $btn.text('еще');
            } else {
                $parent.attr('data-expanded', 'true');
                const fullText = $parent.attr('data-full');
                $parent.contents().filter(function () {
                    return this.nodeType === 3;
                }).first().replaceWith(fullText);
                $btn.text('свернуть');
            }
        });

    }


}
    const attachedModal = $('.attached-files-modal');

if (attachedModal.length) {
	const closeBtn = attachedModal.find('.close-btn');
	const openBtn = $('.attach-btn');
	const modalContainer = attachedModal; // В данном случае сама `.attached-files-modal` и есть контейнер

	function isMobile() {
		return window.innerWidth <= 1024;
	}

	function openAttachedModal() {
		if (isMobile()) {
			attachedModal.addClass('visible').removeClass('closing');
			modalContainer.css({
				transform: 'translateY(100%)',
				transition: 'none',
				display: 'block'
			});
			setTimeout(() => {
				modalContainer.css({
					transform: 'translateY(0)',
					transition: 'transform 0.3s ease'
				});
			}, 20);
			$('body').addClass('_lock');
		}
	}

	function closeAttachedModal() {
		if (isMobile()) {
			attachedModal.addClass('closing');
			modalContainer.css('transform', 'translateY(100%)');
			setTimeout(() => {
				attachedModal.removeClass('visible closing');
				modalContainer.css({ transform: '', transition: '', display: '' });
				$('body').removeClass('_lock');
			}, 300);
		}
	}

	// Открытие по кнопке
	openBtn.on('click', function (e) {
		e.preventDefault();
		openAttachedModal();
	});

	// Закрытие по кнопке
	closeBtn.on('click', function () {
		closeAttachedModal();
	});

	// Клик вне контейнера (не нужен, если вся модалка — сам контейнер)
	attachedModal.on('click', function (e) {
		if (!$(e.target).closest('.attached-files-modal').length) {
			closeAttachedModal();
		}
	});

	// Свайп вниз для закрытия
	if (isMobile()) {
		let startY = 0;
		let currentY = 0;
		let dragging = false;

		modalContainer.on('touchstart', function (e) {
			if (e.originalEvent.touches.length !== 1) return;
			dragging = true;
			startY = e.originalEvent.touches[0].clientY;
			modalContainer.css('transition', 'none');
		});

		modalContainer.on('touchmove', function (e) {
			if (!dragging) return;
			currentY = e.originalEvent.touches[0].clientY;
			const deltaY = currentY - startY;
			if (deltaY > 0) {
				modalContainer.css('transform', `translateY(${deltaY}px)`);
			}
		});

		modalContainer.on('touchend', function () {
			if (!dragging) return;
			dragging = false;
			const deltaY = currentY - startY;
			const threshold = window.innerHeight * 0.25;
			modalContainer.css('transition', 'transform 0.3s ease');

			if (deltaY > threshold) {
				closeAttachedModal();
			} else {
				modalContainer.css('transform', 'translateY(0)');
			}
		});
	}

    $('.skip-offer-products').on('click', function() {
        $(this).closest('.chat-item').remove();
    });

    $('.offer-btn').on('click', function() {
        $('.offer-btn').hide();
        $('.offer-step').css('display', 'flex');
    });
    $('.book-btn').on('click', function() {
        $('.offer-step').hide();
    });
}

    const paymentModal = $('.payment-modal');

if (paymentModal.length) {
	const openBtn = $('.payment-btn');
	const closeBtn = paymentModal.find('.close-btn');
	const modalContainer = paymentModal.find('.payment-modal-inner');

	function isMobile() {
		return window.innerWidth < 1024;
	}

	function openPaymentModal() {
		if (isMobile()) {
			paymentModal.addClass('visible').removeClass('closing');
			modalContainer.css({
				transform: 'translateY(100%)',
				transition: 'none',
				display: 'flex'
			});
			setTimeout(() => {
				modalContainer.css({
					transform: 'translateY(0)',
					transition: 'transform 0.3s ease'
				});
			}, 20);
			$('body').addClass('_lock');
		} else {
			paymentModal.show();
		}
	}

	function closePaymentModal() {
		if (isMobile()) {
			paymentModal.addClass('closing');
			modalContainer.css('transform', 'translateY(100%)');
			setTimeout(() => {
				paymentModal.removeClass('visible closing');
				modalContainer.css({ transform: '', transition: '', display: '' });
				$('body').removeClass('_lock');
			}, 300);
		} else {
			paymentModal.hide();
			$('body').removeClass('_lock');
		}
	}

	// Открытие
	openBtn.on('click', function (e) {
		e.preventDefault();
		openPaymentModal();
	});

	// Закрытие по крестику
	closeBtn.on('click', function () {
		closePaymentModal();
	});

	// Закрытие по клику вне контейнера (по фону)
	paymentModal.on('click', function (e) {
		if (!$(e.target).closest('.payment-modal-inner').length) {
			closePaymentModal();
		}
	});

	// Свайп вниз для закрытия на мобилке
	if (isMobile()) {
		let startY = 0;
		let currentY = 0;
		let dragging = false;

		modalContainer.on('touchstart', function (e) {
			if (e.originalEvent.touches.length !== 1) return;
			dragging = true;
			startY = e.originalEvent.touches[0].clientY;
			modalContainer.css('transition', 'none');
		});

		modalContainer.on('touchmove', function (e) {
			if (!dragging) return;
			currentY = e.originalEvent.touches[0].clientY;
			const deltaY = currentY - startY;
			if (deltaY > 0) {
				modalContainer.css('transform', `translateY(${deltaY}px)`);
			}
		});

		modalContainer.on('touchend', function () {
			if (!dragging) return;
			dragging = false;
			const deltaY = currentY - startY;
			const threshold = window.innerHeight * 0.25;
			modalContainer.css('transition', 'transform 0.3s ease');

			if (deltaY > threshold) {
				closePaymentModal();
			} else {
				modalContainer.css('transform', 'translateY(0)');
			}
		});
	}
}

    const messages = $('.messages');

if(messages.length > 0) {
	$('.messages-tab-btn').on('click', function() {
		$(this).addClass('active');
		$(this).siblings().removeClass('active');
	});
}

    // const cropper = new Cropper(document.getElementById('edit-banner-img'), {
//     aspectRatio: 1,
//     viewMode: 1,
// });

$('.confirme-delete-btn').on('click', function () {
    $('#delete-profile-modal').addClass('confirmed');
});

(function () {
    const modal = document.querySelector('#change-phone-modal');
    if (!modal) return;

    const etaps = modal.querySelectorAll('.etap');
    const phoneInput = modal.querySelector('.phone-input');
    const phoneOutput = modal.querySelector('.phone-output');
    const confirmBtn = modal.querySelector('.confirme-phone-btn');
    const codeInputs = modal.querySelectorAll('.code-input input');

    let currentEtap = 0;

    function showEtap(index) {
        etaps.forEach((etap, i) => {
            etap.style.display = i === index ? 'block' : 'none';
        });
        currentEtap = index;
    }

    function validatePhone(phone) {
        const clean = phone.replace(/\D/g, '');
        return clean.length === 11;
    }

    function getCode() {
        return Array.from(codeInputs).map(i => i.value.trim()).join('');
    }

    function clearInputs() {
        phoneInput.value = '';
        codeInputs.forEach(input => input.value = '');
    }

    // Автофокус по вводу кода
    codeInputs.forEach((input, index) => {
        input.addEventListener('input', () => {
            input.value = input.value.replace(/\D/g, '').slice(0, 1);
            if (input.value && index < codeInputs.length - 1) {
                codeInputs[index + 1].focus();
            }
        });
    });

    confirmBtn.addEventListener('click', (e) => {
        e.preventDefault();

        if (currentEtap === 0) {
            const phoneVal = phoneInput.value.trim();
            if (validatePhone(phoneVal)) {
                phoneOutput.textContent = phoneVal;
                showEtap(1);
            } else {
                modal.querySelector('.input-text').classList.add('error');
            }
        } else if (currentEtap === 1) {
            const code = getCode();
            if (code.length === 4) {
                showEtap(2);
            } else {
                alert('Введите 4-значный код');
            }
        } else {
            // Этап завершения
            $('#change-phone-modal').removeClass('visible');
            $('body').removeClass('_lock');
            clearInputs();
            showEtap(0);
        }

        console.log(currentEtap);

        if (currentEtap === 0) {
            $('.close-modal').trigger('click');
            console.log('close modal');
        }
    });

    // Механика кнопки "Отправить ещё раз"
    const resendBtn = modal.querySelector('.resend-code');
    if (resendBtn) {
        resendBtn.addEventListener('click', (e) => {
            e.preventDefault();
            alert('Код отправлен повторно!');
        });
    }

    // Сброс ошибок на вводе
    phoneInput.addEventListener('input', () => {
        modal.querySelector('.input-text').classList.remove('error');
    });

    // Инициализация
    showEtap(0);
})();

(function () {
    const modal = document.querySelector('#change-email-modal');
    if (!modal) return;

    const etaps = modal.querySelectorAll('.etap');
    const emailInput = modal.querySelector('input[name="email"]');
    const confirmBtn = modal.querySelector('.confirme-phone-btn');

    let currentEtap = 0;

    function showEtap(index) {
        etaps.forEach((etap, i) => {
            etap.style.display = i === index ? 'block' : 'none';
        });
        currentEtap = index;
    }

    function validateEmail(email) {
        // Простая валидация email
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    function clearInputs() {
        emailInput.value = '';
    }

    confirmBtn.addEventListener('click', (e) => {
        e.preventDefault();

        if (currentEtap === 0) {
            const emailVal = emailInput.value.trim();
            if (validateEmail(emailVal)) {
                showEtap(1);
            } else {
                modal.querySelector('.input-text').classList.add('error');
            }
        } else {
            // Завершение этапов
            $('#change-email-modal').removeClass('visible');
            $('body').removeClass('_lock');
            clearInputs();
            showEtap(0);
        }
    });

    emailInput.addEventListener('input', () => {
        modal.querySelector('.input-text').classList.remove('error');
    });

    // Инициализация
    showEtap(0);
})();

$(photoUpload).find('input').on('change', function () {
    $('.photo-slice').css('display', 'flex');
})

$(document).on('click', '.remove-btn', function () {
    if ($('.uploaded-photo-item').length === 0) {
        $('.photo-slice').hide();
    }
})
$(document).ready(function () {
    const $overlayTop = $('.overlay-top');
    const $overlayBottom = $('.overlay-bottom');
    const $photoSlice = $('.photo-slice');
    const $border = $('.border');

    let isDragging = false;
    let startY = 0;
    let startTopHeight = 0;

    $border.on('mousedown', function (e) {
        isDragging = true;
        startY = e.clientY;
        startTopHeight = $overlayTop.height();
        $('body').css('user-select', 'none');
    });

    $(window).on('mousemove', function (e) {
        if (!isDragging) return;

        const dy = e.clientY - startY;
        const newTopHeight = startTopHeight + dy;

        const maxTop = $photoSlice.height() - $border.outerHeight() - 10;
        const clamped = Math.max(0, Math.min(newTopHeight, maxTop));

        $overlayTop.css('flex', `0 0 ${clamped}px`);
        $overlayBottom.css('flex', `1`);
    });

    $(window).on('mouseup', function () {
        if (isDragging) {
            isDragging = false;
            $('body').css('user-select', '');
        }
    });

    $('#edit-banner-modal .show-preview').on('click', function () {
        $('#edit-banner-modal .personal-room-user').toggle();
        $('#edit-banner-modal .photo-slice').toggle();
        $('#edit-banner-modal .modal-title').toggle();
        $('#edit-banner-modal .edit-banner-modal').toggle();
        $(document).find('#edit-banner-modal .photo-upload').toggle();
        $(this).text($('#edit-banner-modal .personal-room-user').is(':visible') ? 'Редактировать' : 'Предпросмотр');
    })
    $('.upload-avatar').on('change', function () {
        const file = this.files[0];
        if (!file) return;

        if (!file.type.startsWith('image/')) {
            alert('Пожалуйста, выберите изображение');
            return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
            $('.input-avatar .img img').attr('src', e.target.result);
            $('.input-avatar .img img').show();
            $('.input-avatar .img .text').hide();
            $('.input-avatar .img .icon').hide();
        };
        reader.readAsDataURL(file);
    });


    $('.add-new-address').on('click', function () {
        $('.address-modal-map').hide();
        $('.address-modal-select').hide();
        $('.address-modal-bottom .button').hide();
        $('.address-modal-bottom .save-btn').show();
        $('.address-modal-create').css('display', 'block');

    });

    $('#change-email-modal .confirme-phone-btn').on('click', function () {
        const $etaps = $('#change-email-modal .modal-content .etap:nth-child(2)');
        if ($(this).hasClass('close-modal')) {
            return $('#change-email-modal .close-modal').trigger('click');
        }
        if ($etaps.is(':visible')) {
            $(this).addClass('close-modal');
        }
    });

    const messageContainer = $('.personal-room .message-container');

    $('.personal-room-pet .remove-btn').on('click', function () {
        $(this).closest('.personal-room-pet').remove();
        $(messageContainer).show()
        $(messageContainer).find('.delete-message').css('display', 'flex');
        setTimeout(() => {
            $(messageContainer).hide()
            $(messageContainer).find('.delete-message').css('display', 'none');
        }, 2000);
    });

    $('.personal-tab-btn').click(function () {
        $('.personal-tab-btn').removeClass("active");
        $(this).addClass('active')
    })

    $('.show-more-btn').click(function () {
        $(this).siblings('.hiden').slideToggle(500)
        $(this).toggleClass('active')
        $(this).find('.btn-text').text($(this).siblings('.hiden').is(':visible') ? 'Скрыть' : 'Показать еще 12 записей')
    })


    $('.add-new-advantage input[type="file"]').on('change', function () {
        const file = this.files[0];
        if (!file) return;
    
        const allowedExtensions = ['jpg', 'jpeg', 'png', 'pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'];
        const maxSizeMB = 30;
        const fileName = file.name;
        const fileExt = fileName.split('.').pop().toLowerCase();
        const fileSizeMB = file.size / (1024 * 1024);
    
        const $container = $(this).closest('.personal-room-add-advantages');
        $container.find('.attached-item').remove();
    
        if (!allowedExtensions.includes(fileExt)) {
            alert('Разрешены только файлы: JPG, PNG, PDF');
            $(this).val('');
            return;
        }
    
        if (fileSizeMB > maxSizeMB) {
            alert('Максимальный размер файла — 30 МБ');
            $(this).val('');
            return;
        }
    
        const fileSize = (file.size / 1024).toFixed(1); // в KB
    
        const attachedHtml = `<div class=advantage-item><div class=img><img alt=""src=img/auth-main-mobile2.jpg></div><div class=info><span class=name>Пример достижения</span> <span class=years>2016 - 2021</span><div class=help-popap><span class=toggle-icon><svg fill=none height=4 viewBox="0 0 12 4"width=12 xmlns=http://www.w3.org/2000/svg><path d="M2.87695 1.77539C2.87695 2.00586 2.82031 2.21484 2.70703 2.40234C2.59375 2.58594 2.44141 2.73438 2.25 2.84766C2.0625 2.96094 1.85156 3.01758 1.61719 3.01758C1.39062 3.01758 1.18164 2.96094 0.990234 2.84766C0.802734 2.73438 0.652344 2.58594 0.539062 2.40234C0.429688 2.21484 0.375 2.00586 0.375 1.77539C0.375 1.54883 0.429688 1.3418 0.539062 1.1543C0.652344 0.962891 0.802734 0.8125 0.990234 0.703125C1.18164 0.589844 1.39062 0.533203 1.61719 0.533203C1.97266 0.533203 2.27148 0.654297 2.51367 0.896484C2.75586 1.13477 2.87695 1.42773 2.87695 1.77539ZM7.24219 1.77539C7.24219 2.00586 7.18555 2.21484 7.07227 2.40234C6.95898 2.58594 6.80859 2.73438 6.62109 2.84766C6.4375 2.96094 6.23047 3.01758 6 3.01758C5.77344 3.01758 5.56445 2.96094 5.37305 2.84766C5.18555 2.73438 5.03516 2.58594 4.92188 2.40234C4.8125 2.21484 4.75781 2.00586 4.75781 1.77539C4.75781 1.54883 4.8125 1.3418 4.92188 1.1543C5.03516 0.962891 5.18555 0.8125 5.37305 0.703125C5.56445 0.589844 5.77344 0.533203 6 0.533203C6.34766 0.533203 6.64062 0.654297 6.87891 0.896484C7.12109 1.13477 7.24219 1.42773 7.24219 1.77539ZM11.625 1.77539C11.625 2.00586 11.5684 2.21484 11.4551 2.40234C11.3418 2.58594 11.1895 2.73438 10.998 2.84766C10.8105 2.96094 10.6035 3.01758 10.377 3.01758C10.1465 3.01758 9.93555 2.96094 9.74414 2.84766C9.55664 2.73438 9.40625 2.58594 9.29297 2.40234C9.17969 2.21484 9.12305 2.00586 9.12305 1.77539C9.12305 1.54883 9.17969 1.3418 9.29297 1.1543C9.40625 0.962891 9.55664 0.8125 9.74414 0.703125C9.93555 0.589844 10.1465 0.533203 10.377 0.533203C10.7285 0.533203 11.0234 0.654297 11.2617 0.896484C11.5039 1.13477 11.625 1.42773 11.625 1.77539Z"fill=black fill-opacity=0.9 /></svg></span><ul><li><button>Редактировать <svg fill=none height=14 viewBox="0 0 14 14"width=14 xmlns=http://www.w3.org/2000/svg><path d="M8.22229 3.78027L3.32789 8.68027C3.30813 8.69819 3.29114 8.71895 3.27749 8.74187L1.16069 12.4603C1.12844 12.5129 1.11529 12.575 1.12345 12.6362C1.13161 12.6974 1.16058 12.7539 1.20549 12.7963C1.23049 12.8232 1.26085 12.8445 1.2946 12.859C1.32836 12.8735 1.36477 12.8807 1.40149 12.8803C1.451 12.8812 1.49969 12.8676 1.54149 12.8411L5.24869 10.7075L5.30469 10.6627L10.2047 5.76267L8.22229 3.78027Z"fill=black /><path d="M11.8747 4.09379C12.139 3.82828 12.2874 3.46886 12.2874 3.09419C12.2874 2.71953 12.139 2.36011 11.8747 2.09459C11.7479 1.96272 11.5957 1.85798 11.4273 1.78674C11.2588 1.7155 11.0776 1.67925 10.8947 1.68019C10.5195 1.68615 10.1617 1.83895 9.89789 2.10579L8.62109 3.36019L10.6035 5.34259L11.8747 4.09379Z"fill=black /><path d="M12.6012 12.3203H7.56125C7.48699 12.3203 7.41577 12.3498 7.36326 12.4023C7.31075 12.4548 7.28125 12.5261 7.28125 12.6003C7.28125 12.6746 7.31075 12.7458 7.36326 12.7983C7.41577 12.8508 7.48699 12.8803 7.56125 12.8803H12.6012C12.6755 12.8803 12.7467 12.8508 12.7992 12.7983C12.8517 12.7458 12.8812 12.6746 12.8812 12.6003C12.8812 12.5261 12.8517 12.4548 12.7992 12.4023C12.7467 12.3498 12.6755 12.3203 12.6012 12.3203Z"fill=black /></svg></button><li><button>Удалить <svg fill=none height=14 viewBox="0 0 14 14"width=14 xmlns=http://www.w3.org/2000/svg><path d="M10.9183 2.24023H3.07828C2.8555 2.24023 2.64184 2.32873 2.48431 2.48626C2.32678 2.6438 2.23828 2.85745 2.23828 3.08023V4.20023C2.23828 4.27449 2.26778 4.34571 2.32029 4.39822C2.3728 4.45073 2.44402 4.48023 2.51828 4.48023H11.4783C11.5525 4.48023 11.6238 4.45073 11.6763 4.39822C11.7288 4.34571 11.7583 4.27449 11.7583 4.20023V3.08023C11.7583 2.85745 11.6698 2.6438 11.5123 2.48626C11.3547 2.32873 11.1411 2.24023 10.9183 2.24023Z"fill=black /><path d="M9.23656 2.80001C9.1623 2.80001 9.09108 2.77051 9.03857 2.718C8.98606 2.66549 8.95656 2.59427 8.95656 2.52001V1.82001C8.95656 1.76961 8.85576 1.68001 8.68216 1.68001H5.32216C5.13736 1.68001 5.03656 1.76961 5.03656 1.82001V2.52001C5.03656 2.59427 5.00706 2.66549 4.95455 2.718C4.90204 2.77051 4.83082 2.80001 4.75656 2.80001C4.6823 2.80001 4.61108 2.77051 4.55857 2.718C4.50606 2.66549 4.47656 2.59427 4.47656 2.52001V1.82001C4.48501 1.71912 4.51334 1.62089 4.55993 1.531C4.60652 1.44111 4.67044 1.36133 4.748 1.29626C4.82557 1.23119 4.91524 1.18211 5.01186 1.15186C5.10849 1.12161 5.21014 1.11079 5.31096 1.12001H8.67096C8.77267 1.10921 8.87551 1.11886 8.97343 1.14839C9.07135 1.17791 9.16238 1.22672 9.24117 1.29194C9.31995 1.35716 9.3849 1.43748 9.4322 1.52816C9.47949 1.61885 9.50817 1.71808 9.51656 1.82001V2.52001C9.51656 2.59427 9.48706 2.66549 9.43455 2.718C9.38204 2.77051 9.31082 2.80001 9.23656 2.80001Z"fill=black /><path d="M11.1969 5.04004V12.04C11.1969 12.2628 11.1084 12.4765 10.9508 12.634C10.7933 12.7915 10.5797 12.88 10.3569 12.88H3.63688C3.41409 12.88 3.20044 12.7915 3.04291 12.634C2.88537 12.4765 2.79688 12.2628 2.79688 12.04V5.04004H11.1969Z"fill=black /></svg></button></ul></div></div></div>`;
    
        $container.append(attachedHtml);
    });
});

    function initModal({
  modalId,
  openSelector,
  closeSelector = '.close-modal',
  containerSelector = '.modal-container',
  mobileThreshold = 1024,
  isSlideRight = false  // 🆕 опция для горизонтального слайда
}) {
  const modal = $(`#${modalId}`);
  const modalContainer = modal.find(containerSelector);
  const openBtn = $(openSelector);
  const closeBtn = modal.find(closeSelector);
  let isSwipeEventsBound = false;

  function isMobile() {
    return window.innerWidth < mobileThreshold;
  }

  function openModal() {
    $('body').css('overflow', 'hidden');

    modal.addClass('visible').removeClass('closing');

    if (isMobile()) {
      if (isSlideRight) {
        modalContainer.css({ transform: 'translateX(100%)', transition: 'none' });
        setTimeout(() => {
          modalContainer.css({ transform: 'translateX(0)', transition: 'transform 0.3s ease' });
        }, 20);
      } else {
        modalContainer.css({ transform: 'translateY(100%)', transition: 'none' });
        setTimeout(() => {
          modalContainer.css({ transform: 'translateY(0)', transition: 'transform 0.3s ease' });
        }, 20);
      }

      if (!isSwipeEventsBound) {
        bindSwipeToClose();
        isSwipeEventsBound = true;
      }
    } else {
      modal.css('display', 'flex');
      modal.addClass('open').removeClass('closing');

      if (isSlideRight) {
        modalContainer.css({ transform: 'translateX(100%)', transition: 'none' });
        setTimeout(() => {
          modalContainer.css({ transform: 'translateX(0)', transition: 'transform 0.3s ease' });
        }, 20);
      } else {
        modalContainer.css({ opacity: 0, transition: 'opacity 0.3s ease' });
        setTimeout(() => modalContainer.css('opacity', 1), 20);
      }
    }
  }


  function closeModal() {
    $('body').css('overflow', 'auto');
    modal.addClass('closing');

    if (isMobile()) {
      if (isSlideRight) {
        modalContainer.css('transform', 'translateX(100%)');
      } else {
        modalContainer.css('transform', 'translateY(100%)');
      }

      setTimeout(() => {
        modal.removeClass('visible closing');
        modalContainer.css({ transform: '', transition: '' });
      }, 300);
    } else {
      if (isSlideRight) {
        modalContainer.css({ transform: 'translateX(100%)', transition: 'transform 0.3s ease' });
      } else {
        modalContainer.css({ opacity: 0, transition: 'opacity 0.3s ease' });
      }

      setTimeout(() => {
        modal.css('display', 'none');
        modal.removeClass('open closing');
        modalContainer.css({ transform: '', transition: '', opacity: '' });
      }, 300);
    }
  }


  function bindSwipeToClose() {
    // ваш код свайпа
  }

  openBtn.on('click', e => { e.preventDefault(); openModal(); });
  closeBtn.on('click', e => { e.preventDefault(); closeModal(); });
  modal.on('click', e => {
    if (!$(e.target).closest(containerSelector).length) closeModal();
  });

  return { openModal, closeModal };
}

initModal({
  modalId: 'logout-modal',
  openSelector: '#logout-button'
});

initModal({
  modalId: 'change-seller-modal',
  openSelector: '.open-changepseller-modal'
});

initModal({
  modalId: 'edit-banner-modal',
  openSelector: '.open-edit-banner-modal'
});

initModal({
  modalId: 'delete-profile-modal',
  openSelector: '.delete-btn'
});

initModal({
  modalId: 'change-phone-modal',
  openSelector: '.open-change-phone-modal'
});

initModal({
  modalId: 'change-email-modal',
  openSelector: '.open-change-email-modal'
});

initModal({
  modalId: 'pets-father-modal',
  openSelector: '.open-pets-father-modal'
});

initModal({
  modalId: 'pets-mother-modal',
  openSelector: '.open-pets-mother-modal'
});

initModal({
  modalId: 'verified-modal',
  openSelector: '.open-verified-modal'
});

initModal({
  modalId: 'upload-avatar-modal',
  openSelector: '.open-upload-avatar-modal'
});

initModal({
  modalId: 'add-to-cart-modal',
  openSelector: '.open-add-to-cart-modal'
});

initModal({
  modalId: 'optional-order-modal',
  openSelector: '.open-optional-order-modal'
});

initModal({
  modalId: 'filter-modal',
  openSelector: '.open-filter-modal',
  isSlideRight: true
});
    const createAdd = $('.create-add-inner');

if(createAdd.length > 0) {
    const checkboxes = $(createAdd).find('.input-checkbox');
    const createAddEtap = $(createAdd).find('.create-add-etap-item');
    const nextEtapBtn = $(createAdd).find('.next-etap-btn');
    const backEtapBtn = $(createAdd).find('.back-etap-btn');
    const addTypeEtap = $(".add-type-etap")
    const back = $(createAdd).find('.back');

    $(back).on('click', function(e) {
        const {activeEtap} = getActiveEtap();
        if($(activeEtap).prev().get(0)) {
            e.preventDefault();
            updateEtaps(-1)
        }
    })

    if(addTypeEtap.length > 0) {
        $(addTypeEtap).find('.input-checkbox').click(function() {
            const value = $(this).find('input').val();
            if(value === 'pet') {
                $(addTypeEtap).find('.create-add-etaps').attr('action', 'create-add-pet.html');
            }else if(value === 'product') {
                $(addTypeEtap).find('.create-add-etaps').attr('action', 'create-add-product.html');
            }
        })
    }

    const getActiveEtap = () => {
        const activeEtap = $(createAdd).find('.create-add-etap-item.active');
        const activeEtapIndex = activeEtap.data('index');
        return {activeEtap, activeEtapIndex}
    }

    const updateEtaps = (step) => {
        const {activeEtap, activeEtapIndex} = getActiveEtap();
        if(!$(activeEtap).next().get(0)) {
            $(addTypeEtap).find('.create-add-etaps').submit();
        }else {
            $(activeEtap).removeClass('active');
            $(createAdd).find(`.create-add-etap-item[data-index="${activeEtapIndex + step}"]`).addClass('active');
        }
        if($(createAdd).find(`.create-add-etap-item[data-index="${activeEtapIndex + step}"]`).next().get(0)) {
            $(createAdd).find('.create-add-final-buttons').hide();
            $(createAdd).find('.create-add-form-buttons').show();
        }else {
            $(createAdd).find('.create-add-final-buttons').css('display', 'flex');
            $(createAdd).find('.create-add-form-buttons').hide();
        }
    }

    
    $(backEtapBtn).on('click', function() {
        updateEtaps(-1);
    });

    $(nextEtapBtn).on('click', function() {
        updateEtaps(1);
    });

    $(createAdd).find('.bron-btn').on('click', function() {
        $(createAdd).find('.bron-input').toggle();
    })
}


$(".origin-toggle-btn").on("click", function(e) {
    $('.dropdown').removeClass('active');
    $(this).closest('.input-text').siblings('.origin-drop-down').addClass('active');
    e.stopPropagation();
});

$('.origin-drop-down').on("click", function(e) {
    e.stopPropagation();
});

$(".breed-toggle-btn").on("click", function(e) {
    $('.dropdown').removeClass('active');
    $(this).closest('.input-text').siblings('.breed-dropdown').addClass('active');
    e.stopPropagation();
});

$(".temperament-toggle-btn").on("click", function(e) {
    $('.dropdown').removeClass('active');
    $(this).closest('.input-text').siblings('.temperament-dropdown').addClass('active');
    e.stopPropagation();
});

$('.temperament-dropdown').on("click", function(e) {
    e.stopPropagation();
});

$('.select-temperament-btn').on('click', function() {
    $(this).parent().removeClass('active');
    $(this).parent().siblings('.input-text').find('input').val($(this).text());
});

$('.breed-dropdown').on("click", function(e) {
    e.stopPropagation();
});

$(document).on("click", function() {
    $('.dropdown').removeClass('active');
});

$(".open-address-dropdown").on("click", function(e) {
    $('.dropdown').removeClass('active');
    $(this).closest('.input-text').siblings('.address-dropdown').addClass('active');
    console.log($(this).closest('.input-text').siblings('.address-dropdown'));
    e.stopPropagation();
});

$('.address-dropdown').on("click", function(e) {
    e.stopPropagation();
});


$('.select-address-btn').on('click', function() {
    $(this).parent().removeClass('active');
    $(this).parent().siblings('.input-text').find('input').val($(this).text());
});


$('.select-breed-btn').on('click', function() {
    $('.breed-dropdown').removeClass('active');
    $(this).parent().parent().siblings('.input-text').find('input').val($(this).text());
});

$('.origin-drop-down').find('.input-checkbox').on('click', function() {
    $(this).closest('.origin-drop-down').siblings('.input-text').find('input').val($(this).find('.title').text());
    $('.origin-drop-down').removeClass('active');
})

$('.set-body-color-btn').on('click', function(e) {
    e.stopPropagation();
    $('.dropdown').removeClass('active');
    $(this).parent().parent().siblings('.color-dropdown').addClass('active');
})

$('.select-color-btn').on('click', function() {
    $(this).parent().parent().siblings('.input-text').find('input').val($(this).val());
    $(this).parent().removeClass('active');
})

$('.eye-color-slide-btn').on('click', function() {
    $('.eye-color-item-2').toggle();
    const isVisible = $('.eye-color-item-2').is(":visible")
    $('.eye-color-item-1').find('input').attr('placeholder', isVisible ? 'Левый глаз' : 'Не выбрано');
    $('.eye-color-item').find('.title').toggle();
})

    const petsModal = $('.create-pets-modal');

if($(petsModal).get(0)) {
    const createBtn = $(petsModal).find('.create-btn');
    const etapItems = $(petsModal).find('.create-pets-modal-etaps-item');
    const detailInfoBtn = $(petsModal).find('.add-details-btn');
    const detailInfoContainer = $(petsModal).find('.create-pets-modal-etaps-item[data-index="3"]');
    const backBtn = $(petsModal).find('.back-btn');

    $(createBtn).on('click', function () {
        $(etapItems).removeClass('active');
        $(petsModal).find('.create-pets-modal-etaps-item[data-index="2"]').addClass('active');
        $(this).hide();
        $('.back-btn').hide();
    })

    $(detailInfoBtn).on('click', function () {
        $(etapItems).removeClass('active');
        $(detailInfoContainer).addClass('active');
        $('.back-btn').show();
        $('.create-btn').hide();
    })

    $(backBtn).on('click', function () {
        $(etapItems).removeClass('active');
        $(petsModal).find('.create-pets-modal-etaps-item[data-index="2"]').addClass('active');
        $('.back-btn').hide();
        $('.create-btn').show();
    })
}
    var swiperProduct = new Swiper(".product-detail-swiper-gallery .swiper", {
    loop: true,
    spaceBetween: 10,
    watchSlidesProgress: true,
});
var swiper2 = new Swiper(".product-detail-swiper-thumbs .swiper", {
    loop: true,
    slidesPerView: 2,
    spaceBetween: 12,
    direction: "vertical",
    navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev",
    },
    thumbs: {
        swiper: swiperProduct,
    },
});

Fancybox.bind('[data-fancybox="gallery"]', {
    // опциональные параметры
});
    const blogSwiper = document.querySelector('.blog-swiper');

if(blogSwiper) { 
    new Swiper(blogSwiper, {
        slidesPerView: "auto",
        spaceBetween: 16,
        navigation: {
            nextEl: '.blog .slidenext',
            prevEl: '.blog .slideprev',
        },
    });
}

$('.blog-buttons button').click(function () {
    $('.blog-buttons button').removeClass('active')
    $(this).addClass("active")
})
    const notifications = $('.notifications');

if (notifications.length > 0) {
  const nothToggleBtn = notifications.find('.header-menu-link');
  const nothMenu = notifications.find('.notifications-menu');
  const nothItems = nothMenu.find('.notifications-menu-item');
  const clearNotBtn = nothMenu.find('.notifications-menu-title .clear-not-btn');
  const removeNotBtn = nothItems.find('.remove-btn');

  let startY = 0, currentY = 0, dragging = false;
  const mobileThreshold = 1024;

  function isMobile() {
    return window.innerWidth < mobileThreshold;
  }

  function closeMenu() {
    nothMenu.slideUp(300);
  }

  function bindMobileSwipe() {
    nothMenu.on('touchstart', function(e) {
      if (!isMobile()) return;
      if (e.originalEvent.touches.length !== 1) return;
      dragging = true;
      startY = e.originalEvent.touches[0].clientY;
      nothMenu.css('transition', 'none');
    });

    nothMenu.on('touchmove', function(e) {
      if (!dragging) return;
      currentY = e.originalEvent.touches[0].clientY;
      const deltaY = currentY - startY;
      if (deltaY < 0) {
        $(this).css('transform', `translateY(${deltaY}px)`);
      }
    });

    nothMenu.on('touchend touchcancel', function() {
      if (!dragging) return;
      dragging = false;
      const deltaY = currentY - startY;
      nothMenu.css('transition', 'transform 0.3s ease');
      if (deltaY < - (window.innerHeight * 0.15) ) {
        closeMenu();
      } else {
        nothMenu.css('transform', 'translateY(0)');
      }
    });
  }

  bindMobileSwipe();

  nothToggleBtn.on('click', function(e) {
    e.stopPropagation();
    $('.header-submenu').stop(true, true).slideUp(200);
    nothMenu.stop(true, true).slideToggle(200);
  });

  clearNotBtn.on('click', function(e) {
    e.stopPropagation();
    nothItems.remove();
    closeMenu();
  });

  removeNotBtn.on('click', function(e) {
    e.stopPropagation();
    $(this).closest('.notifications-menu-item').remove();
  });

  $(document).on('click', function() {
    closeMenu();
  });
}

    $(document).ready(function () {
    $('.filter-modal-item-title').click(function () {
        $(this).parent().toggleClass('active');
    });

    const inputCheckbx = $('#filter-modal').find('input[type="checkbox"]')

    $('.reset-btn').click(function () {
        $(inputCheckbx).prop('checked', false)
    })
});
});