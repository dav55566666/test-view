const tabs = document.querySelectorAll('.tabs');

const setTab = (parentId, index) => {
  console.log(parentId, index, 'setTab');
  const parent = document.getElementById(parentId);
  const tabs = parent.querySelectorAll('.tab-button');
  const tabContents = parent.querySelectorAll('.tab-content__item');
  tabContents.forEach(tabContent => {
    const tabIndex = tabContent.dataset.tab;
    if (tabIndex === index) {
      tabContent.classList.add('active');
    } else {
      tabContent.classList.remove('active');
    }
  });
  if (tabs.length > 0) {
    tabs.forEach(tab => {
      const tabIndex = tab.dataset.tab;
      if (tabIndex === index) {
        tab.classList.add('active');
      } else {
        tab.classList.remove('active');
      }
    });
  }
}

(function ($) {
  const SKIP_VALIDATE = { '1': new Set(['3', '5']) };

  const EMAIL_RE = /^[^\s@]+@[^\s@]+\.[^\s@]+$/i;
  const isEmail = v => EMAIL_RE.test($.trim(v || ''));
  const minLen = (v, n) => String(v || '').length >= n;
  const markErr = ($el, bad) => $el && $el.length && $el.closest('.input').toggleClass('is-error', !!bad);

  function validateActiveTab($parent) {
    const $current = $parent.find('.tab-content__item.active');
    if (!$current.length) return true;
    const tabId = String($current.data('tab'));
    switch (tabId) {
      case '1': {
        const $email = $current.find('#login-1');
        const $pass = $current.find('#password');
        let ok = true;
        if (!$email.length || !isEmail($email.val())) { markErr($email, true); ok = false; } else markErr($email, false);
        if (!$pass.length || !minLen($pass.val(), 6)) { markErr($pass, true); ok = false; } else markErr($pass, false);
        return ok;
      }
      case '3': {
        const $email = $current.find('#login-2');
        const ok = $email.length && isEmail($email.val());
        markErr($email, !ok);
        return ok;
      }
      case '4': {
        const $p1 = $current.find('#login-3');
        const $p2 = $current.find('#password-repeat');
        let ok = true;
        if (!$p1.length || !minLen($p1.val(), 6)) { markErr($p1, true); ok = false; } else markErr($p1, false);
        if (!$p2.length || $p1.val() !== $p2.val()) { markErr($p2, true); ok = false; } else markErr($p2, false);
        return ok;
      }
      case '5': {
        const $email = $current.find('#login-4');
        const ok = $email.length && isEmail($email.val());
        markErr($email, !ok);
        return ok;
      }
      case '2':
      case '6': {
        const $form = $current.find('.verify-form');
        const $inputs = $form.find('input[type="text"]').slice(0, 4);
        const ok = $inputs.length === 4 && $inputs.toArray().every(i => /^\d$/.test(i.value));
        $inputs.each((_, el) => markErr($(el), !/^\d$/.test(el.value)));
        const $btn = $form.find('button.button').first();
        if ($btn.length) {
          $btn.prop('disabled', !ok);
          $btn.toggleClass('disabled', !ok).toggleClass('diabled', !ok);
        }
        return ok;
      }
      default:
        return true;
    }
  }

  function toggleTabs($parent, to) {
    const $tabs = $parent.find('.tab-button');
    const $contents = $parent.find('.tab-content__item');
    $contents.each(function () { $(this).toggleClass('active', String($(this).data('tab')) === to); });
    $tabs.each(function () { $(this).toggleClass('active', String($(this).data('tab')) === to); });
  }

  function updateCodeButton($parent) {
    const $current = $parent.find('.tab-content__item.active');
    if (!$current.length) return;
    const $form = $current.find('.verify-form');
    if (!$form.length) return;
    const $inputs = $form.find('input[type="text"]').slice(0, 4);
    const ok = $inputs.length === 4 && $inputs.toArray().every(i => /^\d$/.test(i.value));
    const $btn = $form.find('button.button').first();
    if ($btn.length) {
      $btn.prop('disabled', !ok);
      $btn.toggleClass('disabled', !ok).toggleClass('diabled', !ok);
    }
  }

  function setupCodeInputs($scope) {
    $scope.find('.verify-form').each(function () {
      const $form = $(this);
      const $inputs = $form.find('input[type="text"]').slice(0, 4);
      $inputs.each(function (idx, el) {
        const $inp = $(el);
        $inp.attr({ inputmode: 'numeric', maxlength: 1 }).removeAttr('max');
        $inp.on('input', function () {
          this.value = this.value.replace(/\D/g, '').slice(0, 1);
          if (this.value && $inputs[idx + 1]) $inputs[idx + 1].focus();
          updateCodeButton($scope.closest('.tabs').length ? $scope.closest('.tabs') : $('#auth-modal-tab'));
        });
        $inp.on('keydown', function (e) {
          if (e.key === 'Backspace' && !this.value && $inputs[idx - 1]) $inputs[idx - 1].focus();
        });
        $inp.on('paste', function (e) {
          e.preventDefault();
          const s = (e.originalEvent.clipboardData || window.clipboardData).getData('text').replace(/\D/g, '').slice(0, 4);
          if (!s) return;
          $inputs.each((i, el2) => (el2.value = s[i] || ''));
          const last = Math.min(s.length, 4) - 1;
          if (last >= 0 && $inputs[last]) $inputs[last].focus();
          updateCodeButton($scope.closest('.tabs').length ? $scope.closest('.tabs') : $('#auth-modal-tab'));
        });
      });
      updateCodeButton($scope.closest('.tabs').length ? $scope.closest('.tabs') : $('#auth-modal-tab'));
    });
  }

  window.setTab = function (parentId, index) {
    const $parent = $('#' + parentId);
    if (!$parent.length) return;
    const $current = $parent.find('.tab-content__item.active');
    const from = String($current.data('tab') || '');
    const to = String(index);
    const canSkip = SKIP_VALIDATE[from]?.has(to);
    if (!canSkip && !validateActiveTab($parent)) {
      const $err = $parent.find('.tab-content__item.active .is-error').first();
      if ($err.length) $err[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
      return;
    }
    toggleTabs($parent, to);
    if (to === '2' || to === '6') updateCodeButton($parent);
  };

  $(function () {
    $('#auth-modal, #auth-modal-tab').find('input[id^="code-"]').each(function () {
      $(this).removeAttr('max').attr('maxlength', 1);
    });
    setupCodeInputs($('#auth-modal, #auth-modal-tab'));

    $('#auth-modal .close-btn').on('click', function () {
      const $tabsRoot = $('#auth-modal-tab');
      if ($tabsRoot.length) {
        toggleTabs($tabsRoot, '1');
        $('#auth-modal .is-error').removeClass('is-error');
        $('#auth-modal .verify-form input[type="text"]').val('');
        updateCodeButton($tabsRoot);
      }
    });
  });
})(jQuery);
const closeModal = (modalId) => {
    $(`#${modalId}`).removeClass('visible');
    $('body').removeClass('_lock');
}

$('.modal .close-btn').click(function() {
    const modalId = $(this).closest('.modal').attr('id');
    closeModal(modalId);
});

const openModal = (modalId) => {
    $(`#${modalId}`).addClass('visible');
    $('body').addClass('_lock');
}

const mainSwiper = new Swiper('.main__swiper .swiper', {
	slidesPerView: 'auto',
	centeredSlides: true,
	loop: true,
	navigation: {
		nextEl: '.main__swiper .slide-next',
		prevEl: '.main__swiper .slide-prev',
	},
	autoplay: {
		delay: 2500,
		disableOnInteraction: false,
	},
});

setTimeout(() => {
	// mainSwiper.slideNext();
	$('.main__swiper .slide-next').trigger('click');
	$('.loader').remove();
}, 1000);

const mainCategoriesSwiper = new Swiper('.main__categories .swiper', {
	slidesPerView: 'auto',
	loop: true,
	navigation: {
		nextEl: '.main__categories .slide-next',
		prevEl: '.main__categories .slide-prev',
	},
});


const topWeekSwiper = new Swiper('.top-week .swiper', {
	slidesPerView: 'auto',
	loop: true,
	navigation: {
		nextEl: '.top-week .slide-next',
		prevEl: '.top-week .slide-prev',
	},
});

const moviesSwiper = new Swiper('.movies-swiper .swiper', {
	slidesPerView: 'auto',
	loop: false,
});

$('.burger-btn').on('click', function (e) {
	$('.header-mobile').slideToggle(500);
	$('body').toggleClass('_lock');
	$(this).toggleClass('active');
	e.stopPropagation();
	$('body').click(function () {
		$('.header-mobile').slideUp(500);
		$('body').removeClass('_lock');
		$('.burger-btn').removeClass('active');
	});
});

$('.mobile-login-btn').on('click', function () {
	openModal('auth-modal');
	$('.header-mobile').slideUp(500);
	$('body').removeClass('_lock');
	$('.burger-btn').removeClass('active');
});


$('.movie-genere-btn').on('click', function () {
	$(this).toggleClass('active');
});


$('.wishlist-btn').on('click', function () {
	$(this).toggleClass('active');
});


$('.set-rating-btn').on('click', function () {
	$('.set-rating-btn').removeClass('active');
	$(this).toggleClass('active');
});

$(".description-btn").on('click', function () {
	$('.movies-detail__parameters').hide();
	$('.movies-detail__description').show();
	$(this).addClass('active');
	$(".details-btn").removeClass('active');
});

$(".details-btn").on('click', function () {
	$('.movies-detail__parameters').show();
	$('.movies-detail__description').hide();
	$(this).addClass('active');
	$(".description-btn").removeClass('active');
});
const isTv = $('.tv-wrapper').length > 0;


if (isTv) {
	$('.tv-header .menu').on('mouseenter', function () {
		$('.tv-header').addClass('active');
	});

	$('.tv-header .menu').on('mouseleave', function () {
		setTimeout(() => {
			$('.tv-header').removeClass('active');
		}, 500);
	});
	$('.move-item').on('mouseenter', function () {
		$(this).addClass('active');
	});
	$('.move-item').on('mouseleave', function () {
		$(this).removeClass('active');
	});
}

$('.end-payment-btn').on('click', function () {
	closeModal('payment-modal');
	closeModal('subscribe-modal');
	setTab('payment-modal-tab', '1');
	openModal('success-payment-modal');
});

$('.auth-modal__type-item').on('click', function () {
	$('.auth-modal__type').hide();
	$('.tv-auth-modal__description').hide()
	if ($(this).val() == '1') {
		$('.tv-auth-modal__title').text('Почта')
		$('.auth-modal__registration').show();
		$('.auth-modal__login').hide();
	} else {
		$('.auth-modal__registration').hide();
		$('.auth-modal__login').show();
	}
});

$('.reg-step-btn').on('click', function () {
	const val = $('.email-input input').val();
	const pass = $('.reg-pass-input input.pass').val();
	const passConfirm = $('.reg-pass-input input.pass-confirm').val();
	const codeInputs = $('.registration-code input');

	if (val.length > 0) {
		$('.auth-modal__registration .email-input').hide();
		$('.auth-modal__registration .reg-pass-input').show();
	} else {
		$('.auth-modal__registration .email-input').show();
		$('.auth-modal__registration .reg-pass-input').hide();
	}

	if (pass !== '' && pass === passConfirm) {
		$('.auth-modal__registration .reg-pass-input').hide();
		$('.registration-code').show();
	}

	console.log(codeInputs);

	let hasValue = false;
	codeInputs.each(function () {
		if ($(this).val().trim() !== '') {
			hasValue = true;
			return false;
		}
	});

	if (hasValue) {
		$('.auth-modal__type').show();
		$('.tv-auth-modal__description').show();
		closeModal('auth-modal');
	}
});